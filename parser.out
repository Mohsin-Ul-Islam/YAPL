Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    MODULUS
    OBJECT
    RETURN
    SKIP
    STRUCT

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement -> assignment_statement
Rule 3     statement -> expression_statement
Rule 4     statement -> iterative_statement
Rule 5     statement -> conditional_statement
Rule 6     statement -> compound_statement
Rule 7     statement -> print_statement
Rule 8     statement -> function_statement
Rule 9     statement -> function_call
Rule 10    statement_list -> statement statement_list
Rule 11    statement_list -> <empty>
Rule 12    function_call -> IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON
Rule 13    function_call -> IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
Rule 14    function_statement -> FUNCTION IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN compound_statement
Rule 15    function_statement -> FUNCTION IDENTIFIER LEFT_PAREN RIGHT_PAREN compound_statement
Rule 16    conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE compound_statement
Rule 17    conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement
Rule 18    iterative_statement -> FOR LEFT_PAREN expression TO expression RIGHT_PAREN compound_statement
Rule 19    iterative_statement -> FOR LEFT_PAREN expression TO expression STEP expression RIGHT_PAREN compound_statement
Rule 20    iterative_statement -> DO compound_statement WHILE LEFT_PAREN expression RIGHT_PAREN
Rule 21    iterative_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN compound_statement
Rule 22    compound_statement -> LEFT_BRACE statement_list RIGHT_BRACE
Rule 23    expression_statement -> expression SEMICOLON
Rule 24    expression_statement -> SEMICOLON
Rule 25    print_statement -> LOG LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
Rule 26    arguments -> expression COMMA arguments
Rule 27    arguments -> expression
Rule 28    assignment_statement -> PUT expression IN IDENTIFIER SEMICOLON
Rule 29    assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON
Rule 30    assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON
Rule 31    expression -> MINUS term
Rule 32    expression -> NOT term
Rule 33    expression -> expression GTE term
Rule 34    expression -> expression LTE term
Rule 35    expression -> expression IS GREATER THAN term
Rule 36    expression -> expression IS LESS THAN term
Rule 37    expression -> expression GT term
Rule 38    expression -> expression LT term
Rule 39    expression -> expression IS term
Rule 40    expression -> expression EQUALS term
Rule 41    expression -> expression OR term
Rule 42    expression -> expression AND term
Rule 43    expression -> expression PLUS term
Rule 44    expression -> expression MINUS term
Rule 45    expression -> term
Rule 46    term -> term PRODUCT factor
Rule 47    term -> term DIVIDE factor
Rule 48    term -> factor
Rule 49    factor -> literal
Rule 50    factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 51    literal -> IDENTIFIER
Rule 52    literal -> DOUBLE
Rule 53    literal -> INTEGER
Rule 54    literal -> STRING

Terminals, with rules where they appear

AND                  : 42
ASSIGN               : 29 30
BREAK                : 
COMMA                : 26
DIVIDE               : 47
DO                   : 20
DOUBLE               : 52
ELSE                 : 16
EQUALS               : 40
FOR                  : 18 19
FUNCTION             : 14 15
GREATER              : 35
GT                   : 37
GTE                  : 33
IDENTIFIER           : 12 13 14 15 28 29 30 51
IF                   : 16 17
IN                   : 28
INTEGER              : 53
IS                   : 35 36 39
LEFT_BRACE           : 22
LEFT_PAREN           : 12 13 14 15 16 17 18 19 20 21 25 50
LESS                 : 36
LET                  : 30
LOG                  : 25
LT                   : 38
LTE                  : 34
MINUS                : 31 44
MODULUS              : 
NOT                  : 32
OBJECT               : 
OR                   : 41
PLUS                 : 43
PRODUCT              : 46
PUT                  : 28
RETURN               : 
RIGHT_BRACE          : 22
RIGHT_PAREN          : 12 13 14 15 16 17 18 19 20 21 25 50
SEMICOLON            : 12 13 23 24 25 28 29 30
SKIP                 : 
STEP                 : 19
STRING               : 54
STRUCT               : 
THAN                 : 35 36
TO                   : 18 19
WHILE                : 20 21
error                : 

Nonterminals, with rules where they appear

arguments            : 13 14 25 26
assignment_statement : 2
compound_statement   : 6 14 15 16 16 17 18 19 20 21
conditional_statement : 5
expression           : 16 17 18 18 19 19 19 20 21 23 26 27 28 29 30 33 34 35 36 37 38 39 40 41 42 43 44 50
expression_statement : 3
factor               : 46 47 48
function_call        : 9
function_statement   : 8
iterative_statement  : 4
literal              : 49
print_statement      : 7
program              : 0
statement            : 10
statement_list       : 1 10 22
term                 : 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47

