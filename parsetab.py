
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftCOMMArightASSIGNleftORleftANDleftEQUALSleftLTLTEGTGTEleftPLUSMINUSleftEXPleftPRODUCTDIVIDErightNOTrightINCREMENTDECREMENTAND ASSIGN BREAK COMMA DECREMENT DIVIDE DO DOT DOUBLE ELSE EQUALS EXP FALSE FOR FUNCTION GREATER GT GTE IDENTIFIER IF IN INCREMENT INTEGER IS LEFT_BRACE LEFT_PAREN LESS LET LOG LT LTE MINUS MODULUS NOT OBJECT OR PLUS PRODUCT PUT RETURN RIGHT_BRACE RIGHT_PAREN SEMICOLON SKIP STEP STRING STRUCT THAN TO TRUE TYPE_BOOL TYPE_CHAR TYPE_DOUBLE TYPE_INT TYPE_STRING WHILE\n        type_specifier : TYPE_BOOL\n                       | TYPE_INT\n                       | TYPE_CHAR\n                       | TYPE_DOUBLE\n                       | TYPE_STRING\n    empty :arguments   : expression COMMA argumentsfunction_call : IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLONconditional_statement : IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE compound_statementstruct_declaration : STRUCT IDENTIFIER LEFT_BRACE variable_declaration_list RIGHT_BRACEvariable_declaration : LET IDENTIFIER ASSIGN expression SEMICOLONvariable_declaration_list : variable_declaration variable_declaration_listexpression_statement : expression SEMICOLON\n       expression_statement : SEMICOLON\n    \n        statement : assignment_statement\n                  | expression_statement\n                  | iterative_statement\n                  | conditional_statement\n                  | compound_statement\n                  | print_statement\n                  | function_call\n                  | variable_declaration\n    iterative_statement : DO compound_statement WHILE LEFT_PAREN expression RIGHT_PARENiterative_statement : WHILE LEFT_PAREN expression RIGHT_PAREN compound_statement\n        statement_list : statement statement_list\n    print_statement : LOG LEFT_PAREN arguments RIGHT_PAREN SEMICOLONassignment_statement : PUT expression IN IDENTIFIER SEMICOLONcompound_statement : LEFT_BRACE statement_list RIGHT_BRACEfunction_declaration : FUNCTION IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN compound_statementdeclaration_list : statement declaration_listiterative_statement : FOR LEFT_PAREN expression TO expression RIGHT_PAREN compound_statementprogram : declaration_listexpression : IDENTIFIER INCREMENTfactor : literalterm : term PRODUCT factorarguments : expressionfunction_call : IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN SEMICOLONconditional_statement : IF LEFT_PAREN expression RIGHT_PAREN compound_statementvariable_declaration : type_specifier IDENTIFIER ASSIGN expression SEMICOLONvariable_declaration_list : emptyassignment_statement : IDENTIFIER ASSIGN expression SEMICOLONdeclaration_list : function_declaration declaration_listiterative_statement : FOR LEFT_PAREN expression TO expression STEP expression RIGHT_PAREN compound_statementliteral : IDENTIFIER DOT IDENTIFIERfunction_declaration : FUNCTION IDENTIFIER LEFT_PAREN RIGHT_PAREN compound_statementstatement_list : emptyexpression : IDENTIFIER DECREMENTfactor : LEFT_PAREN expression RIGHT_PARENterm : term DIVIDE factorconditional_statement : IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE conditional_statementvariable_declaration : type_specifier IDENTIFIER SEMICOLONassignment_statement : IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLONdeclaration_list : struct_declaration declaration_listiterative_statement : FOR expression TO expression compound_statementliteral : IDENTIFIERexpression : MINUS termterm : factorvariable_declaration : LET IDENTIFIER SEMICOLONdeclaration_list : emptyiterative_statement : FOR expression TO expression STEP expression compound_statement\n\n    literal : DOUBLE\n            | INTEGER\n            | STRING\n            | TRUE\n            | FALSE\n\n    expression : expression NOT ASSIGN termiterative_statement : FOR LEFT_PAREN variable_declaration expression SEMICOLON assignment_statement RIGHT_PAREN compound_statementexpression : NOT termiterative_statement : FOR LEFT_PAREN variable_declaration expression SEMICOLON expression RIGHT_PAREN compound_statementexpression : expression EXP termiterative_statement : FOR LEFT_PAREN expression SEMICOLON expression SEMICOLON assignment_statement RIGHT_PAREN compound_statementexpression : expression GTE termiterative_statement : FOR LEFT_PAREN expression SEMICOLON expression SEMICOLON expression RIGHT_PAREN compound_statementexpression : expression LTE termexpression : expression IS GREATER THAN termexpression : expression IS LESS THAN termexpression : expression GT termexpression : expression LT termexpression : expression IS termexpression : expression EQUALS termexpression : expression OR termexpression : expression AND termexpression : expression PLUS termexpression : expression MINUS termexpression : term'
    
_lr_action_items = {'FUNCTION':([0,3,4,5,7,8,9,10,11,12,13,14,22,61,96,121,123,128,130,152,154,156,158,162,166,168,169,170,171,172,173,174,183,189,190,191,195,196,197,198,199,],[15,15,15,15,-15,-16,-17,-18,-19,-20,-21,-22,-14,-13,-28,-58,-51,-41,-8,-45,-37,-10,-27,-24,-54,-38,-26,-11,-39,-29,-52,-23,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'STRUCT':([0,3,4,5,7,8,9,10,11,12,13,14,22,61,96,121,123,128,130,152,154,156,158,162,166,168,169,170,171,172,173,174,183,189,190,191,195,196,197,198,199,],[18,18,18,18,-15,-16,-17,-18,-19,-20,-21,-22,-14,-13,-28,-58,-51,-41,-8,-45,-37,-10,-27,-24,-54,-38,-26,-11,-39,-29,-52,-23,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,22,45,46,47,61,96,121,123,128,130,152,154,156,158,162,166,168,169,170,171,172,173,174,183,189,190,191,195,196,197,198,199,],[-6,0,-32,-6,-6,-6,-59,-15,-16,-17,-18,-19,-20,-21,-22,-14,-30,-42,-53,-13,-28,-58,-51,-41,-8,-45,-37,-10,-27,-24,-54,-38,-26,-11,-39,-29,-52,-23,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'PUT':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,58,61,96,121,123,128,130,152,154,156,158,162,165,166,168,169,170,171,172,173,174,177,183,189,190,191,195,196,197,198,199,],[20,20,20,20,-15,-16,-17,-18,-19,-20,-21,-22,20,-14,20,-13,-28,-58,-51,-41,-8,-45,-37,-10,-27,-24,20,-54,-38,-26,-11,-39,-29,-52,-23,20,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'IDENTIFIER':([0,3,4,5,7,8,9,10,11,12,13,14,15,17,18,19,20,22,25,28,29,30,32,33,34,35,36,37,49,50,51,58,61,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,84,85,87,94,96,98,99,116,117,120,121,122,123,128,129,130,132,139,140,141,143,144,152,154,156,158,162,165,166,167,168,169,170,171,172,173,174,176,177,183,189,190,191,195,196,197,198,199,],[16,16,16,16,-15,-16,-17,-18,-19,-20,-21,-22,48,55,56,16,55,-14,55,80,81,83,83,-1,-2,-3,-4,-5,55,89,55,16,-13,83,83,83,83,83,83,83,83,83,83,83,55,55,55,55,83,83,55,133,-28,137,83,55,55,55,-58,55,-51,-41,55,-8,55,83,83,55,55,55,-45,-37,-10,-27,-24,180,-54,55,-38,-26,-11,-39,-29,-52,-23,55,180,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'SEMICOLON':([0,3,4,5,7,8,9,10,11,12,13,14,16,19,21,22,31,38,39,40,41,42,43,44,52,53,55,58,61,80,81,82,83,86,88,89,90,93,96,100,101,102,104,106,107,108,109,110,111,112,115,121,123,124,125,128,130,131,133,137,138,145,148,149,150,152,153,154,156,158,159,160,162,164,166,168,169,170,171,172,173,174,183,189,190,191,195,196,197,198,199,],[22,22,22,22,-15,-16,-17,-18,-19,-20,-21,-22,-55,22,61,-14,-85,-57,-34,-61,-62,-63,-64,-65,-33,-47,-55,22,-13,121,123,-56,-55,-68,128,-44,130,-48,-28,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,144,-58,-51,-35,-49,-41,-8,154,-44,158,-66,165,169,170,171,-45,173,-37,-10,-27,-75,-76,-24,177,-54,-38,-26,-11,-39,-29,-52,-23,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'DO':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,58,61,96,121,123,128,130,152,154,156,158,162,166,168,169,170,171,172,173,174,183,189,190,191,195,196,197,198,199,],[23,23,23,23,-15,-16,-17,-18,-19,-20,-21,-22,23,-14,23,-13,-28,-58,-51,-41,-8,-45,-37,-10,-27,-24,-54,-38,-26,-11,-39,-29,-52,-23,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'WHILE':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,58,61,74,96,121,123,128,130,152,154,156,158,162,166,168,169,170,171,172,173,174,183,189,190,191,195,196,197,198,199,],[24,24,24,24,-15,-16,-17,-18,-19,-20,-21,-22,24,-14,24,-13,113,-28,-58,-51,-41,-8,-45,-37,-10,-27,-24,-54,-38,-26,-11,-39,-29,-52,-23,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'FOR':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,58,61,96,121,123,128,130,152,154,156,158,162,166,168,169,170,171,172,173,174,183,189,190,191,195,196,197,198,199,],[25,25,25,25,-15,-16,-17,-18,-19,-20,-21,-22,25,-14,25,-13,-28,-58,-51,-41,-8,-45,-37,-10,-27,-24,-54,-38,-26,-11,-39,-29,-52,-23,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'IF':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,58,61,96,121,123,128,130,152,154,156,158,162,166,168,169,170,171,172,173,174,182,183,189,190,191,195,196,197,198,199,],[26,26,26,26,-15,-16,-17,-18,-19,-20,-21,-22,26,-14,26,-13,-28,-58,-51,-41,-8,-45,-37,-10,-27,-24,-54,-38,-26,-11,-39,-29,-52,-23,26,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'LEFT_BRACE':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,23,31,38,39,40,41,42,43,44,52,53,55,56,58,61,82,83,86,93,96,100,101,102,104,106,107,108,109,110,111,112,121,123,124,125,127,128,130,133,138,142,146,147,151,152,154,156,158,159,160,162,166,168,169,170,171,172,173,174,175,181,182,183,187,188,189,190,191,192,193,194,195,196,197,198,199,],[19,19,19,19,-15,-16,-17,-18,-19,-20,-21,-22,19,-14,19,-85,-57,-34,-61,-62,-63,-64,-65,-33,-47,-55,95,19,-13,-56,-55,-68,-48,-28,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,-58,-51,-35,-49,19,-41,-8,-44,-66,19,19,19,19,-45,-37,-10,-27,-75,-76,-24,-54,-38,-26,-11,-39,-29,-52,-23,19,19,19,-31,19,19,-60,-9,-50,19,19,19,-69,-67,-43,-73,-71,]),'LOG':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,58,61,96,121,123,128,130,152,154,156,158,162,166,168,169,170,171,172,173,174,183,189,190,191,195,196,197,198,199,],[27,27,27,27,-15,-16,-17,-18,-19,-20,-21,-22,27,-14,27,-13,-28,-58,-51,-41,-8,-45,-37,-10,-27,-24,-54,-38,-26,-11,-39,-29,-52,-23,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'LET':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,58,61,76,95,96,121,123,128,130,135,152,154,156,158,162,166,168,169,170,171,172,173,174,183,189,190,191,195,196,197,198,199,],[28,28,28,28,-15,-16,-17,-18,-19,-20,-21,-22,28,-14,28,-13,28,28,-28,-58,-51,-41,-8,28,-45,-37,-10,-27,-24,-54,-38,-26,-11,-39,-29,-52,-23,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'MINUS':([0,3,4,5,7,8,9,10,11,12,13,14,16,17,19,20,21,22,25,31,38,39,40,41,42,43,44,49,51,52,53,54,55,58,60,61,75,76,77,78,79,82,83,86,87,88,89,92,93,96,100,101,102,104,106,107,108,109,110,111,112,114,115,116,117,118,120,121,122,123,124,125,128,129,130,132,133,138,141,143,144,145,146,149,150,152,153,154,156,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,177,178,180,181,183,184,185,189,190,191,195,196,197,198,199,],[30,30,30,30,-15,-16,-17,-18,-19,-20,-21,-22,-55,30,30,30,73,-14,30,-85,-57,-34,-61,-62,-63,-64,-65,30,30,-33,-47,73,-55,30,73,-13,30,30,73,30,30,-56,-55,-68,30,73,-44,73,-48,-28,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,73,73,30,30,73,30,-58,30,-51,-35,-49,-41,30,-8,30,-44,-66,30,30,30,73,73,73,73,-45,73,-37,-10,-27,-75,-76,73,-24,73,73,30,-54,30,-38,-26,-11,-39,-29,-52,-23,30,30,73,-55,73,-31,73,73,-60,-9,-50,-69,-67,-43,-73,-71,]),'NOT':([0,3,4,5,7,8,9,10,11,12,13,14,16,17,19,20,21,22,25,31,38,39,40,41,42,43,44,49,51,52,53,54,55,58,60,61,75,76,77,78,79,82,83,86,87,88,89,92,93,96,100,101,102,104,106,107,108,109,110,111,112,114,115,116,117,118,120,121,122,123,124,125,128,129,130,132,133,138,141,143,144,145,146,149,150,152,153,154,156,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,177,178,180,181,183,184,185,189,190,191,195,196,197,198,199,],[32,32,32,32,-15,-16,-17,-18,-19,-20,-21,-22,-55,32,32,32,62,-14,32,-85,-57,-34,-61,-62,-63,-64,-65,32,32,-33,-47,62,-55,32,62,-13,32,32,62,32,32,-56,-55,-68,32,62,-44,62,-48,-28,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,62,62,32,32,62,32,-58,32,-51,-35,-49,-41,32,-8,32,-44,-66,32,32,32,62,62,62,62,-45,62,-37,-10,-27,-75,-76,62,-24,62,62,32,-54,32,-38,-26,-11,-39,-29,-52,-23,32,32,62,-55,62,-31,62,62,-60,-9,-50,-69,-67,-43,-73,-71,]),'TYPE_BOOL':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,58,61,76,95,96,121,123,128,130,135,152,154,156,158,162,166,168,169,170,171,172,173,174,183,189,190,191,195,196,197,198,199,],[33,33,33,33,-15,-16,-17,-18,-19,-20,-21,-22,33,-14,33,-13,33,33,-28,-58,-51,-41,-8,33,-45,-37,-10,-27,-24,-54,-38,-26,-11,-39,-29,-52,-23,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'TYPE_INT':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,58,61,76,95,96,121,123,128,130,135,152,154,156,158,162,166,168,169,170,171,172,173,174,183,189,190,191,195,196,197,198,199,],[34,34,34,34,-15,-16,-17,-18,-19,-20,-21,-22,34,-14,34,-13,34,34,-28,-58,-51,-41,-8,34,-45,-37,-10,-27,-24,-54,-38,-26,-11,-39,-29,-52,-23,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'TYPE_CHAR':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,58,61,76,95,96,121,123,128,130,135,152,154,156,158,162,166,168,169,170,171,172,173,174,183,189,190,191,195,196,197,198,199,],[35,35,35,35,-15,-16,-17,-18,-19,-20,-21,-22,35,-14,35,-13,35,35,-28,-58,-51,-41,-8,35,-45,-37,-10,-27,-24,-54,-38,-26,-11,-39,-29,-52,-23,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'TYPE_DOUBLE':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,58,61,76,95,96,121,123,128,130,135,152,154,156,158,162,166,168,169,170,171,172,173,174,183,189,190,191,195,196,197,198,199,],[36,36,36,36,-15,-16,-17,-18,-19,-20,-21,-22,36,-14,36,-13,36,36,-28,-58,-51,-41,-8,36,-45,-37,-10,-27,-24,-54,-38,-26,-11,-39,-29,-52,-23,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'TYPE_STRING':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,58,61,76,95,96,121,123,128,130,135,152,154,156,158,162,166,168,169,170,171,172,173,174,183,189,190,191,195,196,197,198,199,],[37,37,37,37,-15,-16,-17,-18,-19,-20,-21,-22,37,-14,37,-13,37,37,-28,-58,-51,-41,-8,37,-45,-37,-10,-27,-24,-54,-38,-26,-11,-39,-29,-52,-23,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'LEFT_PAREN':([0,3,4,5,7,8,9,10,11,12,13,14,16,17,19,20,22,24,25,26,27,30,32,48,49,51,58,61,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,84,85,87,96,99,113,116,117,120,121,122,123,128,129,130,132,139,140,141,143,144,152,154,156,158,162,165,166,167,168,169,170,171,172,173,174,176,177,183,189,190,191,195,196,197,198,199,],[17,17,17,17,-15,-16,-17,-18,-19,-20,-21,-22,51,17,17,17,-14,75,76,78,79,17,17,87,17,17,17,-13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-28,17,141,17,17,17,-58,17,-51,-41,17,-8,17,17,17,17,17,17,-45,-37,-10,-27,-24,17,-54,17,-38,-26,-11,-39,-29,-52,-23,17,17,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'DOUBLE':([0,3,4,5,7,8,9,10,11,12,13,14,17,19,20,22,25,30,32,49,51,58,61,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,84,85,87,96,99,116,117,120,121,122,123,128,129,130,132,139,140,141,143,144,152,154,156,158,162,165,166,167,168,169,170,171,172,173,174,176,177,183,189,190,191,195,196,197,198,199,],[40,40,40,40,-15,-16,-17,-18,-19,-20,-21,-22,40,40,40,-14,40,40,40,40,40,40,-13,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-28,40,40,40,40,-58,40,-51,-41,40,-8,40,40,40,40,40,40,-45,-37,-10,-27,-24,40,-54,40,-38,-26,-11,-39,-29,-52,-23,40,40,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'INTEGER':([0,3,4,5,7,8,9,10,11,12,13,14,17,19,20,22,25,30,32,49,51,58,61,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,84,85,87,96,99,116,117,120,121,122,123,128,129,130,132,139,140,141,143,144,152,154,156,158,162,165,166,167,168,169,170,171,172,173,174,176,177,183,189,190,191,195,196,197,198,199,],[41,41,41,41,-15,-16,-17,-18,-19,-20,-21,-22,41,41,41,-14,41,41,41,41,41,41,-13,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-28,41,41,41,41,-58,41,-51,-41,41,-8,41,41,41,41,41,41,-45,-37,-10,-27,-24,41,-54,41,-38,-26,-11,-39,-29,-52,-23,41,41,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'STRING':([0,3,4,5,7,8,9,10,11,12,13,14,17,19,20,22,25,30,32,49,51,58,61,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,84,85,87,96,99,116,117,120,121,122,123,128,129,130,132,139,140,141,143,144,152,154,156,158,162,165,166,167,168,169,170,171,172,173,174,176,177,183,189,190,191,195,196,197,198,199,],[42,42,42,42,-15,-16,-17,-18,-19,-20,-21,-22,42,42,42,-14,42,42,42,42,42,42,-13,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-28,42,42,42,42,-58,42,-51,-41,42,-8,42,42,42,42,42,42,-45,-37,-10,-27,-24,42,-54,42,-38,-26,-11,-39,-29,-52,-23,42,42,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'TRUE':([0,3,4,5,7,8,9,10,11,12,13,14,17,19,20,22,25,30,32,49,51,58,61,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,84,85,87,96,99,116,117,120,121,122,123,128,129,130,132,139,140,141,143,144,152,154,156,158,162,165,166,167,168,169,170,171,172,173,174,176,177,183,189,190,191,195,196,197,198,199,],[43,43,43,43,-15,-16,-17,-18,-19,-20,-21,-22,43,43,43,-14,43,43,43,43,43,43,-13,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-28,43,43,43,43,-58,43,-51,-41,43,-8,43,43,43,43,43,43,-45,-37,-10,-27,-24,43,-54,43,-38,-26,-11,-39,-29,-52,-23,43,43,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'FALSE':([0,3,4,5,7,8,9,10,11,12,13,14,17,19,20,22,25,30,32,49,51,58,61,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,84,85,87,96,99,116,117,120,121,122,123,128,129,130,132,139,140,141,143,144,152,154,156,158,162,165,166,167,168,169,170,171,172,173,174,176,177,183,189,190,191,195,196,197,198,199,],[44,44,44,44,-15,-16,-17,-18,-19,-20,-21,-22,44,44,44,-14,44,44,44,44,44,44,-13,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-28,44,44,44,44,-58,44,-51,-41,44,-8,44,44,44,44,44,44,-45,-37,-10,-27,-24,44,-54,44,-38,-26,-11,-39,-29,-52,-23,44,44,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'RIGHT_BRACE':([7,8,9,10,11,12,13,14,19,22,57,58,59,61,95,96,97,121,123,128,130,134,135,136,154,157,158,162,166,168,169,170,171,173,174,183,189,190,191,195,196,197,198,199,],[-15,-16,-17,-18,-19,-20,-21,-22,-6,-14,96,-6,-46,-13,-6,-28,-25,-58,-51,-41,-8,156,-6,-40,-37,-12,-27,-24,-54,-38,-26,-11,-39,-52,-23,-31,-60,-9,-50,-69,-67,-43,-73,-71,]),'ASSIGN':([16,62,80,81,89,180,],[49,99,120,122,129,49,]),'DOT':([16,55,83,180,],[50,94,94,50,]),'INCREMENT':([16,55,180,],[52,52,52,]),'DECREMENT':([16,55,180,],[53,53,53,]),'PRODUCT':([16,31,38,39,40,41,42,43,44,55,82,83,86,89,93,100,101,102,104,106,107,108,109,110,111,112,124,125,133,138,159,160,180,],[-55,84,-57,-34,-61,-62,-63,-64,-65,-55,84,-55,84,-44,-48,84,84,84,84,84,84,84,84,84,84,84,-35,-49,-44,84,84,84,-55,]),'DIVIDE':([16,31,38,39,40,41,42,43,44,55,82,83,86,89,93,100,101,102,104,106,107,108,109,110,111,112,124,125,133,138,159,160,180,],[-55,85,-57,-34,-61,-62,-63,-64,-65,-55,85,-55,85,-44,-48,85,85,85,85,85,85,85,85,85,85,85,-35,-49,-44,85,85,85,-55,]),'EXP':([16,21,31,38,39,40,41,42,43,44,52,53,54,55,60,77,82,83,86,88,89,92,93,100,101,102,104,106,107,108,109,110,111,112,114,115,118,124,125,133,138,145,146,149,150,153,159,160,161,163,164,178,180,181,184,185,],[-55,63,-85,-57,-34,-61,-62,-63,-64,-65,-33,-47,63,-55,63,63,-56,-55,-68,63,-44,63,-48,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,63,63,63,-35,-49,-44,-66,63,63,63,63,63,-75,-76,63,63,63,63,-55,63,63,63,]),'GTE':([16,21,31,38,39,40,41,42,43,44,52,53,54,55,60,77,82,83,86,88,89,92,93,100,101,102,104,106,107,108,109,110,111,112,114,115,118,124,125,133,138,145,146,149,150,153,159,160,161,163,164,178,180,181,184,185,],[-55,64,-85,-57,-34,-61,-62,-63,-64,-65,-33,-47,64,-55,64,64,-56,-55,-68,64,-44,64,-48,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,64,64,64,-35,-49,-44,-66,64,64,64,64,64,-75,-76,64,64,64,64,-55,64,64,64,]),'LTE':([16,21,31,38,39,40,41,42,43,44,52,53,54,55,60,77,82,83,86,88,89,92,93,100,101,102,104,106,107,108,109,110,111,112,114,115,118,124,125,133,138,145,146,149,150,153,159,160,161,163,164,178,180,181,184,185,],[-55,65,-85,-57,-34,-61,-62,-63,-64,-65,-33,-47,65,-55,65,65,-56,-55,-68,65,-44,65,-48,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,65,65,65,-35,-49,-44,-66,65,65,65,65,65,-75,-76,65,65,65,65,-55,65,65,65,]),'IS':([16,21,31,38,39,40,41,42,43,44,52,53,54,55,60,77,82,83,86,88,89,92,93,100,101,102,104,106,107,108,109,110,111,112,114,115,118,124,125,133,138,145,146,149,150,153,159,160,161,163,164,178,180,181,184,185,],[-55,66,-85,-57,-34,-61,-62,-63,-64,-65,-33,-47,66,-55,66,66,-56,-55,-68,66,-44,66,-48,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,66,66,66,-35,-49,-44,-66,66,66,66,66,66,-75,-76,66,66,66,66,-55,66,66,66,]),'GT':([16,21,31,38,39,40,41,42,43,44,52,53,54,55,60,77,82,83,86,88,89,92,93,100,101,102,104,106,107,108,109,110,111,112,114,115,118,124,125,133,138,145,146,149,150,153,159,160,161,163,164,178,180,181,184,185,],[-55,67,-85,-57,-34,-61,-62,-63,-64,-65,-33,-47,67,-55,67,67,-56,-55,-68,67,-44,67,-48,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,67,67,67,-35,-49,-44,-66,67,67,67,67,67,-75,-76,67,67,67,67,-55,67,67,67,]),'LT':([16,21,31,38,39,40,41,42,43,44,52,53,54,55,60,77,82,83,86,88,89,92,93,100,101,102,104,106,107,108,109,110,111,112,114,115,118,124,125,133,138,145,146,149,150,153,159,160,161,163,164,178,180,181,184,185,],[-55,68,-85,-57,-34,-61,-62,-63,-64,-65,-33,-47,68,-55,68,68,-56,-55,-68,68,-44,68,-48,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,68,68,68,-35,-49,-44,-66,68,68,68,68,68,-75,-76,68,68,68,68,-55,68,68,68,]),'EQUALS':([16,21,31,38,39,40,41,42,43,44,52,53,54,55,60,77,82,83,86,88,89,92,93,100,101,102,104,106,107,108,109,110,111,112,114,115,118,124,125,133,138,145,146,149,150,153,159,160,161,163,164,178,180,181,184,185,],[-55,69,-85,-57,-34,-61,-62,-63,-64,-65,-33,-47,69,-55,69,69,-56,-55,-68,69,-44,69,-48,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,69,69,69,-35,-49,-44,-66,69,69,69,69,69,-75,-76,69,69,69,69,-55,69,69,69,]),'OR':([16,21,31,38,39,40,41,42,43,44,52,53,54,55,60,77,82,83,86,88,89,92,93,100,101,102,104,106,107,108,109,110,111,112,114,115,118,124,125,133,138,145,146,149,150,153,159,160,161,163,164,178,180,181,184,185,],[-55,70,-85,-57,-34,-61,-62,-63,-64,-65,-33,-47,70,-55,70,70,-56,-55,-68,70,-44,70,-48,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,70,70,70,-35,-49,-44,-66,70,70,70,70,70,-75,-76,70,70,70,70,-55,70,70,70,]),'AND':([16,21,31,38,39,40,41,42,43,44,52,53,54,55,60,77,82,83,86,88,89,92,93,100,101,102,104,106,107,108,109,110,111,112,114,115,118,124,125,133,138,145,146,149,150,153,159,160,161,163,164,178,180,181,184,185,],[-55,71,-85,-57,-34,-61,-62,-63,-64,-65,-33,-47,71,-55,71,71,-56,-55,-68,71,-44,71,-48,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,71,71,71,-35,-49,-44,-66,71,71,71,71,71,-75,-76,71,71,71,71,-55,71,71,71,]),'PLUS':([16,21,31,38,39,40,41,42,43,44,52,53,54,55,60,77,82,83,86,88,89,92,93,100,101,102,104,106,107,108,109,110,111,112,114,115,118,124,125,133,138,145,146,149,150,153,159,160,161,163,164,178,180,181,184,185,],[-55,72,-85,-57,-34,-61,-62,-63,-64,-65,-33,-47,72,-55,72,72,-56,-55,-68,72,-44,72,-48,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,72,72,72,-35,-49,-44,-66,72,72,72,72,72,-75,-76,72,72,72,72,-55,72,72,72,]),'RIGHT_PAREN':([31,38,39,40,41,42,43,44,51,52,53,54,55,82,83,86,87,89,91,92,93,100,101,102,104,106,107,108,109,110,111,112,114,115,118,119,124,125,126,128,133,138,155,158,159,160,161,163,173,178,179,180,184,185,186,],[-85,-57,-34,-61,-62,-63,-64,-65,90,-33,-47,93,-55,-56,-55,-68,127,-44,131,-36,-48,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,142,93,147,148,-35,-49,151,-41,-44,-66,-7,-27,-75,-76,174,175,-52,187,188,-55,192,193,194,]),'IN':([31,38,39,40,41,42,43,44,52,53,55,60,82,83,86,93,100,101,102,104,106,107,108,109,110,111,112,124,125,133,138,159,160,],[-85,-57,-34,-61,-62,-63,-64,-65,-33,-47,-55,98,-56,-55,-68,-48,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,-35,-49,-44,-66,-75,-76,]),'TO':([31,38,39,40,41,42,43,44,52,53,55,77,82,83,86,93,100,101,102,104,106,107,108,109,110,111,112,115,124,125,133,138,159,160,],[-85,-57,-34,-61,-62,-63,-64,-65,-33,-47,-55,117,-56,-55,-68,-48,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,143,-35,-49,-44,-66,-75,-76,]),'COMMA':([31,38,39,40,41,42,43,44,52,53,55,82,83,86,92,93,100,101,102,104,106,107,108,109,110,111,112,124,125,133,138,159,160,],[-85,-57,-34,-61,-62,-63,-64,-65,-33,-47,-55,-56,-55,-68,132,-48,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,-35,-49,-44,-66,-75,-76,]),'STEP':([31,38,39,40,41,42,43,44,52,53,55,82,83,86,93,100,101,102,104,106,107,108,109,110,111,112,124,125,133,138,146,159,160,163,],[-85,-57,-34,-61,-62,-63,-64,-65,-33,-47,-55,-56,-55,-68,-48,-70,-72,-74,-79,-77,-78,-80,-81,-82,-83,-84,-35,-49,-44,-66,167,-75,-76,176,]),'GREATER':([66,],[103,]),'LESS':([66,],[105,]),'ELSE':([96,168,],[-28,182,]),'THAN':([103,105,],[139,140,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,3,4,5,],[2,45,46,47,]),'statement':([0,3,4,5,19,58,],[3,3,3,3,58,58,]),'function_declaration':([0,3,4,5,],[4,4,4,4,]),'struct_declaration':([0,3,4,5,],[5,5,5,5,]),'empty':([0,3,4,5,19,58,95,135,],[6,6,6,6,59,59,136,136,]),'assignment_statement':([0,3,4,5,19,58,165,177,],[7,7,7,7,7,7,179,186,]),'expression_statement':([0,3,4,5,19,58,],[8,8,8,8,8,8,]),'iterative_statement':([0,3,4,5,19,58,],[9,9,9,9,9,9,]),'conditional_statement':([0,3,4,5,19,58,182,],[10,10,10,10,10,10,191,]),'compound_statement':([0,3,4,5,19,23,58,127,142,146,147,151,175,181,182,187,188,192,193,194,],[11,11,11,11,11,74,11,152,162,166,168,172,183,189,190,195,196,197,198,199,]),'print_statement':([0,3,4,5,19,58,],[12,12,12,12,12,12,]),'function_call':([0,3,4,5,19,58,],[13,13,13,13,13,13,]),'variable_declaration':([0,3,4,5,19,58,76,95,135,],[14,14,14,14,14,14,116,135,135,]),'expression':([0,3,4,5,17,19,20,25,49,51,58,75,76,78,79,87,116,117,120,122,129,132,141,143,144,165,167,176,177,],[21,21,21,21,54,21,60,77,88,92,21,114,115,118,92,92,145,146,149,150,153,92,161,163,164,178,181,184,185,]),'type_specifier':([0,3,4,5,19,58,76,95,135,],[29,29,29,29,29,29,29,29,29,]),'term':([0,3,4,5,17,19,20,25,30,32,49,51,58,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,87,99,116,117,120,122,129,132,139,140,141,143,144,165,167,176,177,],[31,31,31,31,31,31,31,31,82,86,31,31,31,100,101,102,104,106,107,108,109,110,111,112,31,31,31,31,31,138,31,31,31,31,31,31,159,160,31,31,31,31,31,31,31,]),'factor':([0,3,4,5,17,19,20,25,30,32,49,51,58,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,84,85,87,99,116,117,120,122,129,132,139,140,141,143,144,165,167,176,177,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,124,125,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'literal':([0,3,4,5,17,19,20,25,30,32,49,51,58,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,84,85,87,99,116,117,120,122,129,132,139,140,141,143,144,165,167,176,177,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'statement_list':([19,58,],[57,97,]),'arguments':([51,79,87,132,],[91,119,126,155,]),'variable_declaration_list':([95,135,],[134,157,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('type_specifier -> TYPE_BOOL','type_specifier',1,'p_type_specifier','Type.py',3),
  ('type_specifier -> TYPE_INT','type_specifier',1,'p_type_specifier','Type.py',4),
  ('type_specifier -> TYPE_CHAR','type_specifier',1,'p_type_specifier','Type.py',5),
  ('type_specifier -> TYPE_DOUBLE','type_specifier',1,'p_type_specifier','Type.py',6),
  ('type_specifier -> TYPE_STRING','type_specifier',1,'p_type_specifier','Type.py',7),
  ('empty -> <empty>','empty',0,'p_empty','Empty.py',4),
  ('arguments -> expression COMMA arguments','arguments',3,'p_arguments','Arguments.py',4),
  ('function_call -> IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON','function_call',4,'p_function_call_empty','Call.py',4),
  ('conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE compound_statement','conditional_statement',7,'p_if_01','If.py',4),
  ('struct_declaration -> STRUCT IDENTIFIER LEFT_BRACE variable_declaration_list RIGHT_BRACE','struct_declaration',5,'p_struct_01','Struct.py',4),
  ('variable_declaration -> LET IDENTIFIER ASSIGN expression SEMICOLON','variable_declaration',5,'p_declaration_01','Variable.py',4),
  ('variable_declaration_list -> variable_declaration variable_declaration_list','variable_declaration_list',2,'p_var_declaration_list_01','VariableList.py',4),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_statement_expression','Expression.py',4),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_statement_expression','Expression.py',5),
  ('statement -> assignment_statement','statement',1,'p_statement','Generic.py',5),
  ('statement -> expression_statement','statement',1,'p_statement','Generic.py',6),
  ('statement -> iterative_statement','statement',1,'p_statement','Generic.py',7),
  ('statement -> conditional_statement','statement',1,'p_statement','Generic.py',8),
  ('statement -> compound_statement','statement',1,'p_statement','Generic.py',9),
  ('statement -> print_statement','statement',1,'p_statement','Generic.py',10),
  ('statement -> function_call','statement',1,'p_statement','Generic.py',11),
  ('statement -> variable_declaration','statement',1,'p_statement','Generic.py',12),
  ('iterative_statement -> DO compound_statement WHILE LEFT_PAREN expression RIGHT_PAREN','iterative_statement',6,'p_do_while','DoWhile.py',4),
  ('iterative_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN compound_statement','iterative_statement',5,'p_while_strict','While.py',4),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','List.py',5),
  ('print_statement -> LOG LEFT_PAREN arguments RIGHT_PAREN SEMICOLON','print_statement',5,'p_statement_log','Print.py',4),
  ('assignment_statement -> PUT expression IN IDENTIFIER SEMICOLON','assignment_statement',5,'p_rule_01','Assignment.py',5),
  ('compound_statement -> LEFT_BRACE statement_list RIGHT_BRACE','compound_statement',3,'p_compound_statement','Compound.py',5),
  ('function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN compound_statement','function_declaration',6,'p_function_statement','Function.py',5),
  ('declaration_list -> statement declaration_list','declaration_list',2,'p_declaration_list_01','List.py',5),
  ('iterative_statement -> FOR LEFT_PAREN expression TO expression RIGHT_PAREN compound_statement','iterative_statement',7,'p_for_01','For.py',5),
  ('program -> declaration_list','program',1,'p_program_01','Program.py',6),
  ('expression -> IDENTIFIER INCREMENT','expression',2,'p_expression_inc','Expression.py',7),
  ('factor -> literal','factor',1,'p_factor','Factor.py',7),
  ('term -> term PRODUCT factor','term',3,'p_term_factor_product','Term.py',7),
  ('arguments -> expression','arguments',1,'p_arguments_single','Arguments.py',8),
  ('function_call -> IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN SEMICOLON','function_call',5,'p_function_call','Call.py',8),
  ('conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement','conditional_statement',5,'p_if_02','If.py',8),
  ('variable_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON','variable_declaration',5,'p_declaration_02','Variable.py',8),
  ('variable_declaration_list -> empty','variable_declaration_list',1,'p_var_declaration_list_02','VariableList.py',8),
  ('assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',4,'p_rule_02','Assignment.py',9),
  ('declaration_list -> function_declaration declaration_list','declaration_list',2,'p_declaration_list_02','List.py',9),
  ('iterative_statement -> FOR LEFT_PAREN expression TO expression STEP expression RIGHT_PAREN compound_statement','iterative_statement',9,'p_for_02','For.py',9),
  ('literal -> IDENTIFIER DOT IDENTIFIER','literal',3,'p_literal_struct','Literal.py',10),
  ('function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN RIGHT_PAREN compound_statement','function_declaration',5,'p_function_statement_empty','Function.py',10),
  ('statement_list -> empty','statement_list',1,'p_statement_list_empty','List.py',10),
  ('expression -> IDENTIFIER DECREMENT','expression',2,'p_expression_dec','Expression.py',11),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor_expression','Factor.py',11),
  ('term -> term DIVIDE factor','term',3,'p_term_factor_divide','Term.py',11),
  ('conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE conditional_statement','conditional_statement',7,'p_if_03','If.py',12),
  ('variable_declaration -> type_specifier IDENTIFIER SEMICOLON','variable_declaration',3,'p_declaration_03','Variable.py',12),
  ('assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',6,'p_rule_03','Assignment.py',13),
  ('declaration_list -> struct_declaration declaration_list','declaration_list',2,'p_declaration_list_03','List.py',13),
  ('iterative_statement -> FOR expression TO expression compound_statement','iterative_statement',5,'p_for_03','For.py',13),
  ('literal -> IDENTIFIER','literal',1,'p_literal_identifier','Literal.py',14),
  ('expression -> MINUS term','expression',2,'p_expression_negative','Expression.py',15),
  ('term -> factor','term',1,'p_term_factor','Term.py',15),
  ('variable_declaration -> LET IDENTIFIER SEMICOLON','variable_declaration',3,'p_declaration_04','Variable.py',16),
  ('declaration_list -> empty','declaration_list',1,'p_declaration_list_04','List.py',17),
  ('iterative_statement -> FOR expression TO expression STEP expression compound_statement','iterative_statement',7,'p_for_04','For.py',17),
  ('literal -> DOUBLE','literal',1,'p_literal','Literal.py',20),
  ('literal -> INTEGER','literal',1,'p_literal','Literal.py',21),
  ('literal -> STRING','literal',1,'p_literal','Literal.py',22),
  ('literal -> TRUE','literal',1,'p_literal','Literal.py',23),
  ('literal -> FALSE','literal',1,'p_literal','Literal.py',24),
  ('expression -> expression NOT ASSIGN term','expression',4,'p_expression_not_eq','Expression.py',19),
  ('iterative_statement -> FOR LEFT_PAREN variable_declaration expression SEMICOLON assignment_statement RIGHT_PAREN compound_statement','iterative_statement',8,'p_for_05','For.py',21),
  ('expression -> NOT term','expression',2,'p_expression_not','Expression.py',23),
  ('iterative_statement -> FOR LEFT_PAREN variable_declaration expression SEMICOLON expression RIGHT_PAREN compound_statement','iterative_statement',8,'p_for_06','For.py',25),
  ('expression -> expression EXP term','expression',3,'p_expression_exp','Expression.py',27),
  ('iterative_statement -> FOR LEFT_PAREN expression SEMICOLON expression SEMICOLON assignment_statement RIGHT_PAREN compound_statement','iterative_statement',9,'p_for_07','For.py',29),
  ('expression -> expression GTE term','expression',3,'p_expression_gte','Expression.py',31),
  ('iterative_statement -> FOR LEFT_PAREN expression SEMICOLON expression SEMICOLON expression RIGHT_PAREN compound_statement','iterative_statement',9,'p_for_08','For.py',33),
  ('expression -> expression LTE term','expression',3,'p_expression_lte','Expression.py',35),
  ('expression -> expression IS GREATER THAN term','expression',5,'p_expression_gt_descriptive','Expression.py',39),
  ('expression -> expression IS LESS THAN term','expression',5,'p_expression_lt_descriptive','Expression.py',43),
  ('expression -> expression GT term','expression',3,'p_expression_gt','Expression.py',47),
  ('expression -> expression LT term','expression',3,'p_expression_lt','Expression.py',51),
  ('expression -> expression IS term','expression',3,'p_expression_equal_is','Expression.py',55),
  ('expression -> expression EQUALS term','expression',3,'p_expression_equal','Expression.py',59),
  ('expression -> expression OR term','expression',3,'p_expression_or','Expression.py',63),
  ('expression -> expression AND term','expression',3,'p_expression_and','Expression.py',67),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','Expression.py',71),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','Expression.py',75),
  ('expression -> term','expression',1,'p_expression_term','Expression.py',80),
]
