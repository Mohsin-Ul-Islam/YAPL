
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftPRODUCTDIVIDEleftANDORrightNOTAND ASSIGN BREAK COMMA DIVIDE DO DOUBLE ELSE EQUALS EQUALS FOR FUNCTION IDENTIFIER IF IN INTEGER LEFT_BRACE LEFT_PAREN LET LOG MINUS MODULUS NOT OBJECT OR PLUS PRODUCT PUT RETURN RIGHT_BRACE RIGHT_PAREN SEMICOLON SKIP STRING STRUCT WHILEprogram : statement_list\n        statement : assignment_statement\n                  | expression_statement\n                  | iterative_statement\n                  | conditional_statement\n                  | compound_statement\n                  | print_statement\n    \n        statement_list : statement statement_list\n                       |\n    conditional_statement : IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE compound_statementconditional_statement : IF LEFT_PAREN expression RIGHT_PAREN compound_statementiterative_statement : WHILE LEFT_PAREN expression RIGHT_PAREN compound_statementcompound_statement : LEFT_BRACE statement_list RIGHT_BRACEexpression_statement : expression SEMICOLON\n       expression_statement : SEMICOLON\n    print_statement : LOG LEFT_PAREN expression RIGHT_PAREN SEMICOLONassignment_statement : PUT expression IN IDENTIFIER SEMICOLONassignment_statement : IDENTIFIER ASSIGN expression SEMICOLONassignment_statement : LET IDENTIFIER ASSIGN expression SEMICOLONexpression : MINUS termexpression : NOT termexpression : expression EQUALS termexpression : expression OR termexpression : expression AND termexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term PRODUCT factorterm : term DIVIDE factorterm : factorfactor : literalfactor : LEFT_PAREN expression RIGHT_PARENliteral : IDENTIFIER\n\n    literal : DOUBLE\n            | INTEGER\n            | STRING\n\n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,13,28,31,59,64,69,70,71,72,73,75,],[-9,0,-1,-9,-2,-3,-4,-5,-6,-7,-15,-8,-14,-13,-18,-17,-19,-12,-11,-16,-10,]),'PUT':([0,3,4,5,6,7,8,9,13,18,31,59,64,69,70,71,72,73,75,],[10,10,-2,-3,-4,-5,-6,-7,-15,10,-14,-13,-18,-17,-19,-12,-11,-16,-10,]),'IDENTIFIER':([0,3,4,5,6,7,8,9,10,13,14,16,18,20,22,31,32,33,34,35,36,37,39,41,43,45,46,48,55,59,64,69,70,71,72,73,75,],[12,12,-2,-3,-4,-5,-6,-7,30,-15,38,30,12,30,30,-14,30,30,30,30,30,30,30,30,30,30,30,63,30,-13,-18,-17,-19,-12,-11,-16,-10,]),'LET':([0,3,4,5,6,7,8,9,13,18,31,59,64,69,70,71,72,73,75,],[14,14,-2,-3,-4,-5,-6,-7,-15,14,-14,-13,-18,-17,-19,-12,-11,-16,-10,]),'SEMICOLON':([0,3,4,5,6,7,8,9,11,12,13,18,21,23,24,25,26,27,30,31,44,47,49,50,51,52,53,54,57,59,61,62,63,64,65,68,69,70,71,72,73,75,],[13,13,-2,-3,-4,-5,-6,-7,31,-33,-15,13,-27,-30,-31,-34,-35,-36,-33,-14,-20,-21,-22,-23,-24,-25,-26,64,-32,-13,-28,-29,69,-18,70,73,-17,-19,-12,-11,-16,-10,]),'WHILE':([0,3,4,5,6,7,8,9,13,18,31,59,64,69,70,71,72,73,75,],[15,15,-2,-3,-4,-5,-6,-7,-15,15,-14,-13,-18,-17,-19,-12,-11,-16,-10,]),'IF':([0,3,4,5,6,7,8,9,13,18,31,59,64,69,70,71,72,73,75,],[17,17,-2,-3,-4,-5,-6,-7,-15,17,-14,-13,-18,-17,-19,-12,-11,-16,-10,]),'LEFT_BRACE':([0,3,4,5,6,7,8,9,13,18,31,59,64,66,67,69,70,71,72,73,74,75,],[18,18,-2,-3,-4,-5,-6,-7,-15,18,-14,-13,-18,18,18,-17,-19,-12,-11,-16,18,-10,]),'LOG':([0,3,4,5,6,7,8,9,13,18,31,59,64,69,70,71,72,73,75,],[19,19,-2,-3,-4,-5,-6,-7,-15,19,-14,-13,-18,-17,-19,-12,-11,-16,-10,]),'MINUS':([0,3,4,5,6,7,8,9,10,11,12,13,16,18,21,23,24,25,26,27,29,30,31,37,39,40,41,43,44,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,69,70,71,72,73,75,],[20,20,-2,-3,-4,-5,-6,-7,20,36,-33,-15,20,20,-27,-30,-31,-34,-35,-36,36,-33,-14,20,20,36,20,20,-20,-21,-22,-23,-24,-25,-26,36,20,36,-32,36,-13,36,-28,-29,-18,36,-17,-19,-12,-11,-16,-10,]),'NOT':([0,3,4,5,6,7,8,9,10,13,16,18,31,37,39,41,43,55,59,64,69,70,71,72,73,75,],[22,22,-2,-3,-4,-5,-6,-7,22,-15,22,22,-14,22,22,22,22,22,-13,-18,-17,-19,-12,-11,-16,-10,]),'LEFT_PAREN':([0,3,4,5,6,7,8,9,10,13,15,16,17,18,19,20,22,31,32,33,34,35,36,37,39,41,43,45,46,55,59,64,69,70,71,72,73,75,],[16,16,-2,-3,-4,-5,-6,-7,16,-15,39,16,41,16,43,16,16,-14,16,16,16,16,16,16,16,16,16,16,16,16,-13,-18,-17,-19,-12,-11,-16,-10,]),'DOUBLE':([0,3,4,5,6,7,8,9,10,13,16,18,20,22,31,32,33,34,35,36,37,39,41,43,45,46,55,59,64,69,70,71,72,73,75,],[25,25,-2,-3,-4,-5,-6,-7,25,-15,25,25,25,25,-14,25,25,25,25,25,25,25,25,25,25,25,25,-13,-18,-17,-19,-12,-11,-16,-10,]),'INTEGER':([0,3,4,5,6,7,8,9,10,13,16,18,20,22,31,32,33,34,35,36,37,39,41,43,45,46,55,59,64,69,70,71,72,73,75,],[26,26,-2,-3,-4,-5,-6,-7,26,-15,26,26,26,26,-14,26,26,26,26,26,26,26,26,26,26,26,26,-13,-18,-17,-19,-12,-11,-16,-10,]),'STRING':([0,3,4,5,6,7,8,9,10,13,16,18,20,22,31,32,33,34,35,36,37,39,41,43,45,46,55,59,64,69,70,71,72,73,75,],[27,27,-2,-3,-4,-5,-6,-7,27,-15,27,27,27,27,-14,27,27,27,27,27,27,27,27,27,27,27,27,-13,-18,-17,-19,-12,-11,-16,-10,]),'RIGHT_BRACE':([3,4,5,6,7,8,9,13,18,28,31,42,59,64,69,70,71,72,73,75,],[-9,-2,-3,-4,-5,-6,-7,-15,-9,-8,-14,59,-13,-18,-17,-19,-12,-11,-16,-10,]),'EQUALS':([11,12,21,23,24,25,26,27,29,30,40,44,47,49,50,51,52,53,54,56,57,58,60,61,62,65,],[32,-33,-27,-30,-31,-34,-35,-36,32,-33,32,-20,-21,-22,-23,-24,-25,-26,32,32,-32,32,32,-28,-29,32,]),'OR':([11,12,21,23,24,25,26,27,29,30,40,44,47,49,50,51,52,53,54,56,57,58,60,61,62,65,],[33,-33,-27,-30,-31,-34,-35,-36,33,-33,33,-20,-21,-22,-23,-24,-25,-26,33,33,-32,33,33,-28,-29,33,]),'AND':([11,12,21,23,24,25,26,27,29,30,40,44,47,49,50,51,52,53,54,56,57,58,60,61,62,65,],[34,-33,-27,-30,-31,-34,-35,-36,34,-33,34,-20,-21,-22,-23,-24,-25,-26,34,34,-32,34,34,-28,-29,34,]),'PLUS':([11,12,21,23,24,25,26,27,29,30,40,44,47,49,50,51,52,53,54,56,57,58,60,61,62,65,],[35,-33,-27,-30,-31,-34,-35,-36,35,-33,35,-20,-21,-22,-23,-24,-25,-26,35,35,-32,35,35,-28,-29,35,]),'ASSIGN':([12,38,],[37,55,]),'PRODUCT':([12,21,23,24,25,26,27,30,44,47,49,50,51,52,53,57,61,62,],[-33,45,-30,-31,-34,-35,-36,-33,45,45,45,45,45,45,45,-32,-28,-29,]),'DIVIDE':([12,21,23,24,25,26,27,30,44,47,49,50,51,52,53,57,61,62,],[-33,46,-30,-31,-34,-35,-36,-33,46,46,46,46,46,46,46,-32,-28,-29,]),'IN':([21,23,24,25,26,27,29,30,44,47,49,50,51,52,53,57,61,62,],[-27,-30,-31,-34,-35,-36,48,-33,-20,-21,-22,-23,-24,-25,-26,-32,-28,-29,]),'RIGHT_PAREN':([21,23,24,25,26,27,30,40,44,47,49,50,51,52,53,56,57,58,60,61,62,],[-27,-30,-31,-34,-35,-36,-33,57,-20,-21,-22,-23,-24,-25,-26,66,-32,67,68,-28,-29,]),'ELSE':([59,72,],[-13,74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,18,],[2,28,42,]),'statement':([0,3,18,],[3,3,3,]),'assignment_statement':([0,3,18,],[4,4,4,]),'expression_statement':([0,3,18,],[5,5,5,]),'iterative_statement':([0,3,18,],[6,6,6,]),'conditional_statement':([0,3,18,],[7,7,7,]),'compound_statement':([0,3,18,66,67,74,],[8,8,8,71,72,75,]),'print_statement':([0,3,18,],[9,9,9,]),'expression':([0,3,10,16,18,37,39,41,43,55,],[11,11,29,40,11,54,56,58,60,65,]),'term':([0,3,10,16,18,20,22,32,33,34,35,36,37,39,41,43,55,],[21,21,21,21,21,44,47,49,50,51,52,53,21,21,21,21,21,]),'factor':([0,3,10,16,18,20,22,32,33,34,35,36,37,39,41,43,45,46,55,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,61,62,23,]),'literal':([0,3,10,16,18,20,22,32,33,34,35,36,37,39,41,43,45,46,55,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',17),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',22),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',23),
  ('statement -> iterative_statement','statement',1,'p_statement','parser.py',24),
  ('statement -> conditional_statement','statement',1,'p_statement','parser.py',25),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',26),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',27),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',34),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list','parser.py',35),
  ('conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE compound_statement','conditional_statement',7,'p_conditional_statement_if_else','parser.py',44),
  ('conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement','conditional_statement',5,'p_conditional_statement_if','parser.py',48),
  ('iterative_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN compound_statement','iterative_statement',5,'p_iterative_statement_while','parser.py',52),
  ('compound_statement -> LEFT_BRACE statement_list RIGHT_BRACE','compound_statement',3,'p_compound_statement','parser.py',56),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_statement_expression','parser.py',60),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_statement_expression','parser.py',61),
  ('print_statement -> LOG LEFT_PAREN expression RIGHT_PAREN SEMICOLON','print_statement',5,'p_statement_log','parser.py',72),
  ('assignment_statement -> PUT expression IN IDENTIFIER SEMICOLON','assignment_statement',5,'p_statement_descriptive','parser.py',81),
  ('assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',4,'p_statement_assignment','parser.py',85),
  ('assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',5,'p_statement_assignment_let','parser.py',89),
  ('expression -> MINUS term','expression',2,'p_expression_negative','parser.py',97),
  ('expression -> NOT term','expression',2,'p_expression_not','parser.py',101),
  ('expression -> expression EQUALS term','expression',3,'p_expression_equal','parser.py',105),
  ('expression -> expression OR term','expression',3,'p_expression_or','parser.py',109),
  ('expression -> expression AND term','expression',3,'p_expression_and','parser.py',113),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','parser.py',117),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','parser.py',121),
  ('expression -> term','expression',1,'p_expression_term','parser.py',126),
  ('term -> term PRODUCT factor','term',3,'p_term_factor_product','parser.py',135),
  ('term -> term DIVIDE factor','term',3,'p_term_factor_divide','parser.py',139),
  ('term -> factor','term',1,'p_term_factor','parser.py',143),
  ('factor -> literal','factor',1,'p_factor','parser.py',151),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor_expression','parser.py',155),
  ('literal -> IDENTIFIER','literal',1,'p_literal_identifier','parser.py',163),
  ('literal -> DOUBLE','literal',1,'p_literal','parser.py',169),
  ('literal -> INTEGER','literal',1,'p_literal','parser.py',170),
  ('literal -> STRING','literal',1,'p_literal','parser.py',171),
]
