
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftCOMMArightASSIGNleftORleftANDleftEQUALSleftLTLTEGTGTEleftPLUSMINUSleftPRODUCTDIVIDErightNOTrightINCREMENTDECREMENTAND ASSIGN BREAK COMMA DECREMENT DIVIDE DO DOUBLE ELSE EQUALS FOR FUNCTION GREATER GT GTE IDENTIFIER IF IN INCREMENT INTEGER IS LEFT_BRACE LEFT_PAREN LESS LET LOG LT LTE MINUS MODULUS NOT OBJECT OR PLUS PRODUCT PUT RETURN RIGHT_BRACE RIGHT_PAREN SEMICOLON SKIP STEP STRING STRUCT THAN TO TYPE_BOOL TYPE_CHAR TYPE_DOUBLE TYPE_INT TYPE_STRING WHILEarguments   : expression COMMA argumentsfunction_call : IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLONassignment_statement : PUT expression IN IDENTIFIER SEMICOLONconditional_statement : IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE compound_statementexpression_statement : expression SEMICOLON\n       expression_statement : SEMICOLON\n    \n        statement : assignment_statement\n                  | expression_statement\n                  | iterative_statement\n                  | conditional_statement\n                  | compound_statement\n                  | print_statement\n                  | function_statement\n                  | function_call\n    iterative_statement : DO compound_statement WHILE LEFT_PAREN expression RIGHT_PARENiterative_statement : FOR LEFT_PAREN expression TO expression RIGHT_PAREN compound_statementiterative_statement : WHILE LEFT_PAREN expression RIGHT_PAREN compound_statement\n        statement_list : statement statement_list\n                       |\n    print_statement : LOG LEFT_PAREN arguments RIGHT_PAREN SEMICOLONfunction_statement : FUNCTION IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN compound_statementcompound_statement : LEFT_BRACE statement_list RIGHT_BRACEprogram : statement_listexpression : IDENTIFIER INCREMENTfactor : literalterm : term PRODUCT factorarguments : expressionfunction_call : IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN SEMICOLONassignment_statement : IDENTIFIER ASSIGN expression SEMICOLONconditional_statement : IF LEFT_PAREN expression RIGHT_PAREN compound_statementiterative_statement : FOR LEFT_PAREN expression TO expression STEP expression RIGHT_PAREN compound_statementliteral : IDENTIFIERfunction_statement : FUNCTION IDENTIFIER LEFT_PAREN RIGHT_PAREN compound_statementexpression : IDENTIFIER DECREMENTfactor : LEFT_PAREN expression RIGHT_PARENterm : term DIVIDE factorassignment_statement : LET IDENTIFIER ASSIGN expression SEMICOLONiterative_statement : FOR expression TO expression compound_statement\n\n    literal : DOUBLE\n            | INTEGER\n            | STRING\n\n    expression : MINUS termterm : factoriterative_statement : FOR expression TO expression STEP expression compound_statementexpression : NOT termexpression : expression GTE termexpression : expression LTE termexpression : expression IS GREATER THAN termexpression : expression IS LESS THAN termexpression : expression GT termexpression : expression LT termexpression : expression IS termexpression : expression EQUALS termexpression : expression OR termexpression : expression AND termexpression : expression PLUS termexpression : expression MINUS termexpression : term'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,15,33,36,90,98,99,111,114,116,118,120,122,123,125,126,131,132,134,135,137,],[-19,0,-23,-19,-7,-8,-9,-10,-11,-12,-13,-14,-6,-18,-5,-22,-29,-2,-3,-28,-37,-17,-38,-30,-20,-33,-15,-21,-16,-44,-4,-31,]),'PUT':([0,3,4,5,6,7,8,9,10,11,15,22,36,90,98,99,111,114,116,118,120,122,123,125,126,131,132,134,135,137,],[12,12,-7,-8,-9,-10,-11,-12,-13,-14,-6,12,-5,-22,-29,-2,-3,-28,-37,-17,-38,-30,-20,-33,-15,-21,-16,-44,-4,-31,]),'IDENTIFIER':([0,3,4,5,6,7,8,9,10,11,12,15,16,19,20,22,24,25,27,36,37,38,39,40,41,42,43,44,45,46,47,48,53,55,57,59,63,64,66,83,88,90,92,96,97,98,99,101,103,105,111,114,116,118,120,121,122,123,125,126,128,131,132,134,135,137,],[14,14,-7,-8,-9,-10,-11,-12,-13,-14,35,-6,51,35,35,14,60,62,62,-5,62,62,62,62,62,62,62,62,62,62,35,35,35,35,35,35,62,62,95,35,35,-22,35,62,62,-29,-2,35,35,35,-3,-28,-37,-17,-38,35,-30,-20,-33,-15,35,-21,-16,-44,-4,-31,]),'LET':([0,3,4,5,6,7,8,9,10,11,15,22,36,90,98,99,111,114,116,118,120,122,123,125,126,131,132,134,135,137,],[16,16,-7,-8,-9,-10,-11,-12,-13,-14,-6,16,-5,-22,-29,-2,-3,-28,-37,-17,-38,-30,-20,-33,-15,-21,-16,-44,-4,-31,]),'SEMICOLON':([0,3,4,5,6,7,8,9,10,11,13,14,15,22,26,28,29,30,31,32,35,36,49,50,61,62,65,67,68,70,72,73,74,75,76,77,78,79,80,86,90,93,94,95,98,99,100,102,108,111,112,113,114,116,118,120,122,123,125,126,131,132,134,135,137,],[15,15,-7,-8,-9,-10,-11,-12,-13,-14,36,-32,-6,15,-58,-43,-25,-39,-40,-41,-32,-5,-24,-34,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,98,99,-35,-22,-26,-36,111,-29,-2,114,116,123,-3,-48,-49,-28,-37,-17,-38,-30,-20,-33,-15,-21,-16,-44,-4,-31,]),'DO':([0,3,4,5,6,7,8,9,10,11,15,22,36,90,98,99,111,114,116,118,120,122,123,125,126,131,132,134,135,137,],[17,17,-7,-8,-9,-10,-11,-12,-13,-14,-6,17,-5,-22,-29,-2,-3,-28,-37,-17,-38,-30,-20,-33,-15,-21,-16,-44,-4,-31,]),'FOR':([0,3,4,5,6,7,8,9,10,11,15,22,36,90,98,99,111,114,116,118,120,122,123,125,126,131,132,134,135,137,],[20,20,-7,-8,-9,-10,-11,-12,-13,-14,-6,20,-5,-22,-29,-2,-3,-28,-37,-17,-38,-30,-20,-33,-15,-21,-16,-44,-4,-31,]),'WHILE':([0,3,4,5,6,7,8,9,10,11,15,22,36,52,90,98,99,111,114,116,118,120,122,123,125,126,131,132,134,135,137,],[18,18,-7,-8,-9,-10,-11,-12,-13,-14,-6,18,-5,84,-22,-29,-2,-3,-28,-37,-17,-38,-30,-20,-33,-15,-21,-16,-44,-4,-31,]),'IF':([0,3,4,5,6,7,8,9,10,11,15,22,36,90,98,99,111,114,116,118,120,122,123,125,126,131,132,134,135,137,],[21,21,-7,-8,-9,-10,-11,-12,-13,-14,-6,21,-5,-22,-29,-2,-3,-28,-37,-17,-38,-30,-20,-33,-15,-21,-16,-44,-4,-31,]),'LEFT_BRACE':([0,3,4,5,6,7,8,9,10,11,15,17,22,26,28,29,30,31,32,35,36,49,50,61,62,65,67,68,70,72,73,74,75,76,77,78,86,90,93,94,98,99,104,106,107,110,111,112,113,114,116,118,120,122,123,124,125,126,127,129,130,131,132,134,135,136,137,],[22,22,-7,-8,-9,-10,-11,-12,-13,-14,-6,22,22,-58,-43,-25,-39,-40,-41,-32,-5,-24,-34,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,-35,-22,-26,-36,-29,-2,22,22,22,22,-3,-48,-49,-28,-37,-17,-38,-30,-20,22,-33,-15,22,22,22,-21,-16,-44,-4,22,-31,]),'LOG':([0,3,4,5,6,7,8,9,10,11,15,22,36,90,98,99,111,114,116,118,120,122,123,125,126,131,132,134,135,137,],[23,23,-7,-8,-9,-10,-11,-12,-13,-14,-6,23,-5,-22,-29,-2,-3,-28,-37,-17,-38,-30,-20,-33,-15,-21,-16,-44,-4,-31,]),'FUNCTION':([0,3,4,5,6,7,8,9,10,11,15,22,36,90,98,99,111,114,116,118,120,122,123,125,126,131,132,134,135,137,],[24,24,-7,-8,-9,-10,-11,-12,-13,-14,-6,24,-5,-22,-29,-2,-3,-28,-37,-17,-38,-30,-20,-33,-15,-21,-16,-44,-4,-31,]),'MINUS':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,19,20,22,26,28,29,30,31,32,34,35,36,47,48,49,50,53,54,55,56,57,59,61,62,65,67,68,70,72,73,74,75,76,77,78,79,82,83,85,86,87,88,89,90,92,93,94,98,99,101,102,103,105,106,111,112,113,114,116,117,118,119,120,121,122,123,125,126,128,129,131,132,133,134,135,137,],[25,25,-7,-8,-9,-10,-11,-12,-13,-14,25,46,-32,-6,25,25,25,-58,-43,-25,-39,-40,-41,46,-32,-5,25,25,-24,-34,25,46,25,46,25,25,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,46,46,25,46,-35,46,25,46,-22,25,-26,-36,-29,-2,25,46,25,25,46,-3,-48,-49,-28,-37,46,-17,46,-38,25,-30,-20,-33,-15,25,46,-21,-16,46,-44,-4,-31,]),'NOT':([0,3,4,5,6,7,8,9,10,11,12,15,19,20,22,36,47,48,53,55,57,59,83,88,90,92,98,99,101,103,105,111,114,116,118,120,121,122,123,125,126,128,131,132,134,135,137,],[27,27,-7,-8,-9,-10,-11,-12,-13,-14,27,-6,27,27,27,-5,27,27,27,27,27,27,27,27,-22,27,-29,-2,27,27,27,-3,-28,-37,-17,-38,27,-30,-20,-33,-15,27,-21,-16,-44,-4,-31,]),'LEFT_PAREN':([0,3,4,5,6,7,8,9,10,11,12,14,15,18,19,20,21,22,23,25,27,36,37,38,39,40,41,42,43,44,45,46,47,48,53,55,57,59,60,63,64,83,84,88,90,92,96,97,98,99,101,103,105,111,114,116,118,120,121,122,123,125,126,128,131,132,134,135,137,],[19,19,-7,-8,-9,-10,-11,-12,-13,-14,19,48,-6,53,19,55,57,19,59,19,19,-5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,92,19,19,19,103,19,-22,19,19,19,-29,-2,19,19,19,-3,-28,-37,-17,-38,19,-30,-20,-33,-15,19,-21,-16,-44,-4,-31,]),'DOUBLE':([0,3,4,5,6,7,8,9,10,11,12,15,19,20,22,25,27,36,37,38,39,40,41,42,43,44,45,46,47,48,53,55,57,59,63,64,83,88,90,92,96,97,98,99,101,103,105,111,114,116,118,120,121,122,123,125,126,128,131,132,134,135,137,],[30,30,-7,-8,-9,-10,-11,-12,-13,-14,30,-6,30,30,30,30,30,-5,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-22,30,30,30,-29,-2,30,30,30,-3,-28,-37,-17,-38,30,-30,-20,-33,-15,30,-21,-16,-44,-4,-31,]),'INTEGER':([0,3,4,5,6,7,8,9,10,11,12,15,19,20,22,25,27,36,37,38,39,40,41,42,43,44,45,46,47,48,53,55,57,59,63,64,83,88,90,92,96,97,98,99,101,103,105,111,114,116,118,120,121,122,123,125,126,128,131,132,134,135,137,],[31,31,-7,-8,-9,-10,-11,-12,-13,-14,31,-6,31,31,31,31,31,-5,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-22,31,31,31,-29,-2,31,31,31,-3,-28,-37,-17,-38,31,-30,-20,-33,-15,31,-21,-16,-44,-4,-31,]),'STRING':([0,3,4,5,6,7,8,9,10,11,12,15,19,20,22,25,27,36,37,38,39,40,41,42,43,44,45,46,47,48,53,55,57,59,63,64,83,88,90,92,96,97,98,99,101,103,105,111,114,116,118,120,121,122,123,125,126,128,131,132,134,135,137,],[32,32,-7,-8,-9,-10,-11,-12,-13,-14,32,-6,32,32,32,32,32,-5,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-22,32,32,32,-29,-2,32,32,32,-3,-28,-37,-17,-38,32,-30,-20,-33,-15,32,-21,-16,-44,-4,-31,]),'RIGHT_BRACE':([3,4,5,6,7,8,9,10,11,15,22,33,36,58,90,98,99,111,114,116,118,120,122,123,125,126,131,132,134,135,137,],[-19,-7,-8,-9,-10,-11,-12,-13,-14,-6,-19,-18,-5,90,-22,-29,-2,-3,-28,-37,-17,-38,-30,-20,-33,-15,-21,-16,-44,-4,-31,]),'GTE':([13,14,26,28,29,30,31,32,34,35,49,50,54,56,61,62,65,67,68,70,72,73,74,75,76,77,78,79,82,85,86,87,89,93,94,102,106,112,113,117,119,129,133,],[37,-32,-58,-43,-25,-39,-40,-41,37,-32,-24,-34,37,37,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,37,37,37,-35,37,37,-26,-36,37,37,-48,-49,37,37,37,37,]),'LTE':([13,14,26,28,29,30,31,32,34,35,49,50,54,56,61,62,65,67,68,70,72,73,74,75,76,77,78,79,82,85,86,87,89,93,94,102,106,112,113,117,119,129,133,],[38,-32,-58,-43,-25,-39,-40,-41,38,-32,-24,-34,38,38,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,38,38,38,-35,38,38,-26,-36,38,38,-48,-49,38,38,38,38,]),'IS':([13,14,26,28,29,30,31,32,34,35,49,50,54,56,61,62,65,67,68,70,72,73,74,75,76,77,78,79,82,85,86,87,89,93,94,102,106,112,113,117,119,129,133,],[39,-32,-58,-43,-25,-39,-40,-41,39,-32,-24,-34,39,39,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,39,39,39,-35,39,39,-26,-36,39,39,-48,-49,39,39,39,39,]),'GT':([13,14,26,28,29,30,31,32,34,35,49,50,54,56,61,62,65,67,68,70,72,73,74,75,76,77,78,79,82,85,86,87,89,93,94,102,106,112,113,117,119,129,133,],[40,-32,-58,-43,-25,-39,-40,-41,40,-32,-24,-34,40,40,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,40,40,40,-35,40,40,-26,-36,40,40,-48,-49,40,40,40,40,]),'LT':([13,14,26,28,29,30,31,32,34,35,49,50,54,56,61,62,65,67,68,70,72,73,74,75,76,77,78,79,82,85,86,87,89,93,94,102,106,112,113,117,119,129,133,],[41,-32,-58,-43,-25,-39,-40,-41,41,-32,-24,-34,41,41,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,41,41,41,-35,41,41,-26,-36,41,41,-48,-49,41,41,41,41,]),'EQUALS':([13,14,26,28,29,30,31,32,34,35,49,50,54,56,61,62,65,67,68,70,72,73,74,75,76,77,78,79,82,85,86,87,89,93,94,102,106,112,113,117,119,129,133,],[42,-32,-58,-43,-25,-39,-40,-41,42,-32,-24,-34,42,42,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,42,42,42,-35,42,42,-26,-36,42,42,-48,-49,42,42,42,42,]),'OR':([13,14,26,28,29,30,31,32,34,35,49,50,54,56,61,62,65,67,68,70,72,73,74,75,76,77,78,79,82,85,86,87,89,93,94,102,106,112,113,117,119,129,133,],[43,-32,-58,-43,-25,-39,-40,-41,43,-32,-24,-34,43,43,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,43,43,43,-35,43,43,-26,-36,43,43,-48,-49,43,43,43,43,]),'AND':([13,14,26,28,29,30,31,32,34,35,49,50,54,56,61,62,65,67,68,70,72,73,74,75,76,77,78,79,82,85,86,87,89,93,94,102,106,112,113,117,119,129,133,],[44,-32,-58,-43,-25,-39,-40,-41,44,-32,-24,-34,44,44,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,44,44,44,-35,44,44,-26,-36,44,44,-48,-49,44,44,44,44,]),'PLUS':([13,14,26,28,29,30,31,32,34,35,49,50,54,56,61,62,65,67,68,70,72,73,74,75,76,77,78,79,82,85,86,87,89,93,94,102,106,112,113,117,119,129,133,],[45,-32,-58,-43,-25,-39,-40,-41,45,-32,-24,-34,45,45,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,45,45,45,-35,45,45,-26,-36,45,45,-48,-49,45,45,45,45,]),'ASSIGN':([14,51,],[47,83,]),'INCREMENT':([14,35,],[49,49,]),'DECREMENT':([14,35,],[50,50,]),'PRODUCT':([14,26,28,29,30,31,32,35,61,62,65,67,68,70,72,73,74,75,76,77,78,86,93,94,112,113,],[-32,63,-43,-25,-39,-40,-41,-32,63,-32,63,63,63,63,63,63,63,63,63,63,63,-35,-26,-36,63,63,]),'DIVIDE':([14,26,28,29,30,31,32,35,61,62,65,67,68,70,72,73,74,75,76,77,78,86,93,94,112,113,],[-32,64,-43,-25,-39,-40,-41,-32,64,-32,64,64,64,64,64,64,64,64,64,64,64,-35,-26,-36,64,64,]),'IN':([26,28,29,30,31,32,34,35,49,50,61,62,65,67,68,70,72,73,74,75,76,77,78,86,93,94,112,113,],[-58,-43,-25,-39,-40,-41,66,-32,-24,-34,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,-35,-26,-36,-48,-49,]),'RIGHT_PAREN':([26,28,29,30,31,32,35,48,49,50,54,61,62,65,67,68,70,72,73,74,75,76,77,78,81,82,85,86,87,89,91,92,93,94,109,112,113,115,117,119,133,],[-58,-43,-25,-39,-40,-41,-32,80,-24,-34,86,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,100,-27,104,-35,86,107,108,110,-26,-36,124,-48,-49,-1,126,127,136,]),'TO':([26,28,29,30,31,32,35,49,50,56,61,62,65,67,68,70,72,73,74,75,76,77,78,86,87,93,94,112,113,],[-58,-43,-25,-39,-40,-41,-32,-24,-34,88,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,-35,105,-26,-36,-48,-49,]),'COMMA':([26,28,29,30,31,32,35,49,50,61,62,65,67,68,70,72,73,74,75,76,77,78,82,86,93,94,112,113,],[-58,-43,-25,-39,-40,-41,-32,-24,-34,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,101,-35,-26,-36,-48,-49,]),'STEP':([26,28,29,30,31,32,35,49,50,61,62,65,67,68,70,72,73,74,75,76,77,78,86,93,94,106,112,113,119,],[-58,-43,-25,-39,-40,-41,-32,-24,-34,-42,-32,-45,-46,-47,-52,-50,-51,-53,-54,-55,-56,-57,-35,-26,-36,121,-48,-49,128,]),'GREATER':([39,],[69,]),'LESS':([39,],[71,]),'THAN':([69,71,],[96,97,]),'ELSE':([90,122,],[-22,130,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,22,],[2,33,58,]),'statement':([0,3,22,],[3,3,3,]),'assignment_statement':([0,3,22,],[4,4,4,]),'expression_statement':([0,3,22,],[5,5,5,]),'iterative_statement':([0,3,22,],[6,6,6,]),'conditional_statement':([0,3,22,],[7,7,7,]),'compound_statement':([0,3,17,22,104,106,107,110,124,127,129,130,136,],[8,8,52,8,118,120,122,125,131,132,134,135,137,]),'print_statement':([0,3,22,],[9,9,9,]),'function_statement':([0,3,22,],[10,10,10,]),'function_call':([0,3,22,],[11,11,11,]),'expression':([0,3,12,19,20,22,47,48,53,55,57,59,83,88,92,101,103,105,121,128,],[13,13,34,54,56,13,79,82,85,87,89,82,102,106,82,82,117,119,129,133,]),'term':([0,3,12,19,20,22,25,27,37,38,39,40,41,42,43,44,45,46,47,48,53,55,57,59,83,88,92,96,97,101,103,105,121,128,],[26,26,26,26,26,26,61,65,67,68,70,72,73,74,75,76,77,78,26,26,26,26,26,26,26,26,26,112,113,26,26,26,26,26,]),'factor':([0,3,12,19,20,22,25,27,37,38,39,40,41,42,43,44,45,46,47,48,53,55,57,59,63,64,83,88,92,96,97,101,103,105,121,128,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,93,94,28,28,28,28,28,28,28,28,28,28,]),'literal':([0,3,12,19,20,22,25,27,37,38,39,40,41,42,43,44,45,46,47,48,53,55,57,59,63,64,83,88,92,96,97,101,103,105,121,128,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'arguments':([48,59,92,101,],[81,91,109,115,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('arguments -> expression COMMA arguments','arguments',3,'p_arguments','Arguments.py',4),
  ('function_call -> IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON','function_call',4,'p_function_call_empty','Call.py',4),
  ('assignment_statement -> PUT expression IN IDENTIFIER SEMICOLON','assignment_statement',5,'p_rule_01','Assignment.py',4),
  ('conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE compound_statement','conditional_statement',7,'p_if_01','If.py',4),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_statement_expression','Expression.py',4),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_statement_expression','Expression.py',5),
  ('statement -> assignment_statement','statement',1,'p_statement','Generic.py',5),
  ('statement -> expression_statement','statement',1,'p_statement','Generic.py',6),
  ('statement -> iterative_statement','statement',1,'p_statement','Generic.py',7),
  ('statement -> conditional_statement','statement',1,'p_statement','Generic.py',8),
  ('statement -> compound_statement','statement',1,'p_statement','Generic.py',9),
  ('statement -> print_statement','statement',1,'p_statement','Generic.py',10),
  ('statement -> function_statement','statement',1,'p_statement','Generic.py',11),
  ('statement -> function_call','statement',1,'p_statement','Generic.py',12),
  ('iterative_statement -> DO compound_statement WHILE LEFT_PAREN expression RIGHT_PAREN','iterative_statement',6,'p_do_while','DoWhile.py',4),
  ('iterative_statement -> FOR LEFT_PAREN expression TO expression RIGHT_PAREN compound_statement','iterative_statement',7,'p_for_01','For.py',4),
  ('iterative_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN compound_statement','iterative_statement',5,'p_while_strict','While.py',4),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','List.py',5),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list','List.py',6),
  ('print_statement -> LOG LEFT_PAREN arguments RIGHT_PAREN SEMICOLON','print_statement',5,'p_statement_log','Print.py',4),
  ('function_statement -> FUNCTION IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN compound_statement','function_statement',6,'p_function_statement','Generic.py',5),
  ('compound_statement -> LEFT_BRACE statement_list RIGHT_BRACE','compound_statement',3,'p_compound_statement','Compound.py',5),
  ('program -> statement_list','program',1,'p_program','Program.py',6),
  ('expression -> IDENTIFIER INCREMENT','expression',2,'p_expression_inc','Expression.py',7),
  ('factor -> literal','factor',1,'p_factor','Factor.py',7),
  ('term -> term PRODUCT factor','term',3,'p_term_factor_product','Term.py',7),
  ('arguments -> expression','arguments',1,'p_arguments_single','Arguments.py',8),
  ('function_call -> IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN SEMICOLON','function_call',5,'p_function_call','Call.py',8),
  ('assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',4,'p_rule_02','Assignment.py',8),
  ('conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement','conditional_statement',5,'p_if_02','If.py',8),
  ('iterative_statement -> FOR LEFT_PAREN expression TO expression STEP expression RIGHT_PAREN compound_statement','iterative_statement',9,'p_for_02','For.py',8),
  ('literal -> IDENTIFIER','literal',1,'p_literal_identifier','Literal.py',9),
  ('function_statement -> FUNCTION IDENTIFIER LEFT_PAREN RIGHT_PAREN compound_statement','function_statement',5,'p_function_statement_empty','Generic.py',10),
  ('expression -> IDENTIFIER DECREMENT','expression',2,'p_expression_dec','Expression.py',11),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor_expression','Factor.py',11),
  ('term -> term DIVIDE factor','term',3,'p_term_factor_divide','Term.py',11),
  ('assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',5,'p_rule_03','Assignment.py',12),
  ('iterative_statement -> FOR expression TO expression compound_statement','iterative_statement',5,'p_for_03','For.py',12),
  ('literal -> DOUBLE','literal',1,'p_literal','Literal.py',16),
  ('literal -> INTEGER','literal',1,'p_literal','Literal.py',17),
  ('literal -> STRING','literal',1,'p_literal','Literal.py',18),
  ('expression -> MINUS term','expression',2,'p_expression_negative','Expression.py',15),
  ('term -> factor','term',1,'p_term_factor','Term.py',15),
  ('iterative_statement -> FOR expression TO expression STEP expression compound_statement','iterative_statement',7,'p_for_04','For.py',16),
  ('expression -> NOT term','expression',2,'p_expression_not','Expression.py',19),
  ('expression -> expression GTE term','expression',3,'p_expression_gte','Expression.py',23),
  ('expression -> expression LTE term','expression',3,'p_expression_lte','Expression.py',27),
  ('expression -> expression IS GREATER THAN term','expression',5,'p_expression_gt_descriptive','Expression.py',31),
  ('expression -> expression IS LESS THAN term','expression',5,'p_expression_lt_descriptive','Expression.py',35),
  ('expression -> expression GT term','expression',3,'p_expression_gt','Expression.py',39),
  ('expression -> expression LT term','expression',3,'p_expression_lt','Expression.py',43),
  ('expression -> expression IS term','expression',3,'p_expression_equal_is','Expression.py',47),
  ('expression -> expression EQUALS term','expression',3,'p_expression_equal','Expression.py',51),
  ('expression -> expression OR term','expression',3,'p_expression_or','Expression.py',55),
  ('expression -> expression AND term','expression',3,'p_expression_and','Expression.py',59),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','Expression.py',63),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','Expression.py',67),
  ('expression -> term','expression',1,'p_expression_term','Expression.py',72),
]
