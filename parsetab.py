
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftPRODUCTDIVIDEleftANDORrightNOTAND ASSIGN BREAK COMMA DIVIDE DO DOUBLE ELSE EQUALS FOR FUNCTION GREATER GT GTE IDENTIFIER IF IN INTEGER IS LEFT_BRACE LEFT_PAREN LESS LET LOG LT LTE MINUS MODULUS NOT OBJECT OR PLUS PRODUCT PUT RETURN RIGHT_BRACE RIGHT_PAREN SEMICOLON SKIP STEP STRING STRUCT THAN TO WHILEprogram : statement_list\n        statement : assignment_statement\n                  | expression_statement\n                  | iterative_statement\n                  | conditional_statement\n                  | compound_statement\n                  | print_statement\n                  | function_statement\n                  | function_call\n    \n        statement_list : statement statement_list\n                       |\n    function_call : IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLONfunction_call : IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN SEMICOLONfunction_statement : FUNCTION IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN compound_statementfunction_statement : FUNCTION IDENTIFIER LEFT_PAREN RIGHT_PAREN compound_statementconditional_statement : IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE compound_statementconditional_statement : IF LEFT_PAREN expression RIGHT_PAREN compound_statementiterative_statement : FOR LEFT_PAREN expression TO expression RIGHT_PAREN compound_statementiterative_statement : FOR LEFT_PAREN expression TO expression STEP expression RIGHT_PAREN compound_statementiterative_statement : DO compound_statement WHILE LEFT_PAREN expression RIGHT_PARENiterative_statement : WHILE LEFT_PAREN expression RIGHT_PAREN compound_statementcompound_statement : LEFT_BRACE statement_list RIGHT_BRACEexpression_statement : expression SEMICOLON\n       expression_statement : SEMICOLON\n    print_statement : LOG LEFT_PAREN arguments RIGHT_PAREN SEMICOLONarguments   : expression COMMA argumentsarguments : expressionassignment_statement : PUT expression IN IDENTIFIER SEMICOLONassignment_statement : IDENTIFIER ASSIGN expression SEMICOLONassignment_statement : LET IDENTIFIER ASSIGN expression SEMICOLONexpression : MINUS termexpression : NOT termexpression : expression GTE termexpression : expression LTE termexpression : expression IS GREATER THAN termexpression : expression IS LESS THAN termexpression : expression GT termexpression : expression LT termexpression : expression IS termexpression : expression EQUALS termexpression : expression OR termexpression : expression AND termexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term PRODUCT factorterm : term DIVIDE factorterm : factorfactor : literalfactor : LEFT_PAREN expression RIGHT_PARENliteral : IDENTIFIER\n\n    literal : DOUBLE\n            | INTEGER\n            | STRING\n\n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,15,33,36,85,93,94,105,108,110,113,114,115,117,120,122,123,125,127,],[-11,0,-1,-11,-2,-3,-4,-5,-6,-7,-8,-9,-24,-10,-23,-22,-29,-12,-28,-13,-30,-21,-17,-25,-15,-20,-14,-18,-16,-19,]),'PUT':([0,3,4,5,6,7,8,9,10,11,15,22,36,85,93,94,105,108,110,113,114,115,117,120,122,123,125,127,],[12,12,-2,-3,-4,-5,-6,-7,-8,-9,-24,12,-23,-22,-29,-12,-28,-13,-30,-21,-17,-25,-15,-20,-14,-18,-16,-19,]),'IDENTIFIER':([0,3,4,5,6,7,8,9,10,11,12,15,16,18,22,24,25,27,36,37,38,39,40,41,42,43,44,45,46,47,48,50,53,54,56,59,60,62,79,85,87,91,92,93,94,96,98,99,105,108,110,113,114,115,117,119,120,122,123,125,127,],[14,14,-2,-3,-4,-5,-6,-7,-8,-9,35,-24,49,35,14,57,35,35,-23,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,90,35,-22,35,35,35,-29,-12,35,35,35,-28,-13,-30,-21,-17,-25,-15,35,-20,-14,-18,-16,-19,]),'LET':([0,3,4,5,6,7,8,9,10,11,15,22,36,85,93,94,105,108,110,113,114,115,117,120,122,123,125,127,],[16,16,-2,-3,-4,-5,-6,-7,-8,-9,-24,16,-23,-22,-29,-12,-28,-13,-30,-21,-17,-25,-15,-20,-14,-18,-16,-19,]),'SEMICOLON':([0,3,4,5,6,7,8,9,10,11,13,14,15,22,26,28,29,30,31,32,35,36,58,61,63,64,66,68,69,70,71,72,73,74,75,76,81,85,88,89,90,93,94,95,97,102,105,106,107,108,110,113,114,115,117,120,122,123,125,127,],[15,15,-2,-3,-4,-5,-6,-7,-8,-9,36,-51,-24,15,-45,-48,-49,-52,-53,-54,-51,-23,-31,-32,-33,-34,-39,-37,-38,-40,-41,-42,-43,-44,93,94,-50,-22,-46,-47,105,-29,-12,108,110,115,-28,-35,-36,-13,-30,-21,-17,-25,-15,-20,-14,-18,-16,-19,]),'FOR':([0,3,4,5,6,7,8,9,10,11,15,22,36,85,93,94,105,108,110,113,114,115,117,120,122,123,125,127,],[17,17,-2,-3,-4,-5,-6,-7,-8,-9,-24,17,-23,-22,-29,-12,-28,-13,-30,-21,-17,-25,-15,-20,-14,-18,-16,-19,]),'DO':([0,3,4,5,6,7,8,9,10,11,15,22,36,85,93,94,105,108,110,113,114,115,117,120,122,123,125,127,],[19,19,-2,-3,-4,-5,-6,-7,-8,-9,-24,19,-23,-22,-29,-12,-28,-13,-30,-21,-17,-25,-15,-20,-14,-18,-16,-19,]),'WHILE':([0,3,4,5,6,7,8,9,10,11,15,22,36,52,85,93,94,105,108,110,113,114,115,117,120,122,123,125,127,],[20,20,-2,-3,-4,-5,-6,-7,-8,-9,-24,20,-23,82,-22,-29,-12,-28,-13,-30,-21,-17,-25,-15,-20,-14,-18,-16,-19,]),'IF':([0,3,4,5,6,7,8,9,10,11,15,22,36,85,93,94,105,108,110,113,114,115,117,120,122,123,125,127,],[21,21,-2,-3,-4,-5,-6,-7,-8,-9,-24,21,-23,-22,-29,-12,-28,-13,-30,-21,-17,-25,-15,-20,-14,-18,-16,-19,]),'LEFT_BRACE':([0,3,4,5,6,7,8,9,10,11,15,19,22,36,85,93,94,100,101,104,105,108,110,113,114,115,116,117,118,120,121,122,123,125,126,127,],[22,22,-2,-3,-4,-5,-6,-7,-8,-9,-24,22,22,-23,-22,-29,-12,22,22,22,-28,-13,-30,-21,-17,-25,22,-15,22,-20,22,-14,-18,-16,22,-19,]),'LOG':([0,3,4,5,6,7,8,9,10,11,15,22,36,85,93,94,105,108,110,113,114,115,117,120,122,123,125,127,],[23,23,-2,-3,-4,-5,-6,-7,-8,-9,-24,23,-23,-22,-29,-12,-28,-13,-30,-21,-17,-25,-15,-20,-14,-18,-16,-19,]),'FUNCTION':([0,3,4,5,6,7,8,9,10,11,15,22,36,85,93,94,105,108,110,113,114,115,117,120,122,123,125,127,],[24,24,-2,-3,-4,-5,-6,-7,-8,-9,-24,24,-23,-22,-29,-12,-28,-13,-30,-21,-17,-25,-15,-20,-14,-18,-16,-19,]),'MINUS':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,18,22,26,28,29,30,31,32,34,35,36,47,48,50,51,53,54,56,58,61,63,64,66,68,69,70,71,72,73,74,75,78,79,80,81,83,84,85,87,88,89,93,94,96,97,98,99,105,106,107,108,110,111,112,113,114,115,117,119,120,122,123,124,125,127,],[25,25,-2,-3,-4,-5,-6,-7,-8,-9,25,46,-51,-24,25,25,-45,-48,-49,-52,-53,-54,46,-51,-23,25,25,25,46,25,25,25,-31,-32,-33,-34,-39,-37,-38,-40,-41,-42,-43,-44,46,46,25,46,-50,46,46,-22,25,-46,-47,-29,-12,25,46,25,25,-28,-35,-36,-13,-30,46,46,-21,-17,-25,-15,25,-20,-14,-18,46,-16,-19,]),'NOT':([0,3,4,5,6,7,8,9,10,11,12,15,18,22,36,47,48,50,53,54,56,79,85,87,93,94,96,98,99,105,108,110,113,114,115,117,119,120,122,123,125,127,],[27,27,-2,-3,-4,-5,-6,-7,-8,-9,27,-24,27,27,-23,27,27,27,27,27,27,27,-22,27,-29,-12,27,27,27,-28,-13,-30,-21,-17,-25,-15,27,-20,-14,-18,-16,-19,]),'LEFT_PAREN':([0,3,4,5,6,7,8,9,10,11,12,14,15,17,18,20,21,22,23,25,27,36,37,38,39,40,41,42,43,44,45,46,47,48,50,53,54,56,57,59,60,79,82,85,87,91,92,93,94,96,98,99,105,108,110,113,114,115,117,119,120,122,123,125,127,],[18,18,-2,-3,-4,-5,-6,-7,-8,-9,18,48,-24,50,18,53,54,18,56,18,18,-23,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,87,18,18,18,99,-22,18,18,18,-29,-12,18,18,18,-28,-13,-30,-21,-17,-25,-15,18,-20,-14,-18,-16,-19,]),'DOUBLE':([0,3,4,5,6,7,8,9,10,11,12,15,18,22,25,27,36,37,38,39,40,41,42,43,44,45,46,47,48,50,53,54,56,59,60,79,85,87,91,92,93,94,96,98,99,105,108,110,113,114,115,117,119,120,122,123,125,127,],[30,30,-2,-3,-4,-5,-6,-7,-8,-9,30,-24,30,30,30,30,-23,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-22,30,30,30,-29,-12,30,30,30,-28,-13,-30,-21,-17,-25,-15,30,-20,-14,-18,-16,-19,]),'INTEGER':([0,3,4,5,6,7,8,9,10,11,12,15,18,22,25,27,36,37,38,39,40,41,42,43,44,45,46,47,48,50,53,54,56,59,60,79,85,87,91,92,93,94,96,98,99,105,108,110,113,114,115,117,119,120,122,123,125,127,],[31,31,-2,-3,-4,-5,-6,-7,-8,-9,31,-24,31,31,31,31,-23,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-22,31,31,31,-29,-12,31,31,31,-28,-13,-30,-21,-17,-25,-15,31,-20,-14,-18,-16,-19,]),'STRING':([0,3,4,5,6,7,8,9,10,11,12,15,18,22,25,27,36,37,38,39,40,41,42,43,44,45,46,47,48,50,53,54,56,59,60,79,85,87,91,92,93,94,96,98,99,105,108,110,113,114,115,117,119,120,122,123,125,127,],[32,32,-2,-3,-4,-5,-6,-7,-8,-9,32,-24,32,32,32,32,-23,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-22,32,32,32,-29,-12,32,32,32,-28,-13,-30,-21,-17,-25,-15,32,-20,-14,-18,-16,-19,]),'RIGHT_BRACE':([3,4,5,6,7,8,9,10,11,15,22,33,36,55,85,93,94,105,108,110,113,114,115,117,120,122,123,125,127,],[-11,-2,-3,-4,-5,-6,-7,-8,-9,-24,-11,-10,-23,85,-22,-29,-12,-28,-13,-30,-21,-17,-25,-15,-20,-14,-18,-16,-19,]),'GTE':([13,14,26,28,29,30,31,32,34,35,51,58,61,63,64,66,68,69,70,71,72,73,74,75,78,80,81,83,84,88,89,97,106,107,111,112,124,],[37,-51,-45,-48,-49,-52,-53,-54,37,-51,37,-31,-32,-33,-34,-39,-37,-38,-40,-41,-42,-43,-44,37,37,37,-50,37,37,-46,-47,37,-35,-36,37,37,37,]),'LTE':([13,14,26,28,29,30,31,32,34,35,51,58,61,63,64,66,68,69,70,71,72,73,74,75,78,80,81,83,84,88,89,97,106,107,111,112,124,],[38,-51,-45,-48,-49,-52,-53,-54,38,-51,38,-31,-32,-33,-34,-39,-37,-38,-40,-41,-42,-43,-44,38,38,38,-50,38,38,-46,-47,38,-35,-36,38,38,38,]),'IS':([13,14,26,28,29,30,31,32,34,35,51,58,61,63,64,66,68,69,70,71,72,73,74,75,78,80,81,83,84,88,89,97,106,107,111,112,124,],[39,-51,-45,-48,-49,-52,-53,-54,39,-51,39,-31,-32,-33,-34,-39,-37,-38,-40,-41,-42,-43,-44,39,39,39,-50,39,39,-46,-47,39,-35,-36,39,39,39,]),'GT':([13,14,26,28,29,30,31,32,34,35,51,58,61,63,64,66,68,69,70,71,72,73,74,75,78,80,81,83,84,88,89,97,106,107,111,112,124,],[40,-51,-45,-48,-49,-52,-53,-54,40,-51,40,-31,-32,-33,-34,-39,-37,-38,-40,-41,-42,-43,-44,40,40,40,-50,40,40,-46,-47,40,-35,-36,40,40,40,]),'LT':([13,14,26,28,29,30,31,32,34,35,51,58,61,63,64,66,68,69,70,71,72,73,74,75,78,80,81,83,84,88,89,97,106,107,111,112,124,],[41,-51,-45,-48,-49,-52,-53,-54,41,-51,41,-31,-32,-33,-34,-39,-37,-38,-40,-41,-42,-43,-44,41,41,41,-50,41,41,-46,-47,41,-35,-36,41,41,41,]),'EQUALS':([13,14,26,28,29,30,31,32,34,35,51,58,61,63,64,66,68,69,70,71,72,73,74,75,78,80,81,83,84,88,89,97,106,107,111,112,124,],[42,-51,-45,-48,-49,-52,-53,-54,42,-51,42,-31,-32,-33,-34,-39,-37,-38,-40,-41,-42,-43,-44,42,42,42,-50,42,42,-46,-47,42,-35,-36,42,42,42,]),'OR':([13,14,26,28,29,30,31,32,34,35,51,58,61,63,64,66,68,69,70,71,72,73,74,75,78,80,81,83,84,88,89,97,106,107,111,112,124,],[43,-51,-45,-48,-49,-52,-53,-54,43,-51,43,-31,-32,-33,-34,-39,-37,-38,-40,-41,-42,-43,-44,43,43,43,-50,43,43,-46,-47,43,-35,-36,43,43,43,]),'AND':([13,14,26,28,29,30,31,32,34,35,51,58,61,63,64,66,68,69,70,71,72,73,74,75,78,80,81,83,84,88,89,97,106,107,111,112,124,],[44,-51,-45,-48,-49,-52,-53,-54,44,-51,44,-31,-32,-33,-34,-39,-37,-38,-40,-41,-42,-43,-44,44,44,44,-50,44,44,-46,-47,44,-35,-36,44,44,44,]),'PLUS':([13,14,26,28,29,30,31,32,34,35,51,58,61,63,64,66,68,69,70,71,72,73,74,75,78,80,81,83,84,88,89,97,106,107,111,112,124,],[45,-51,-45,-48,-49,-52,-53,-54,45,-51,45,-31,-32,-33,-34,-39,-37,-38,-40,-41,-42,-43,-44,45,45,45,-50,45,45,-46,-47,45,-35,-36,45,45,45,]),'ASSIGN':([14,49,],[47,79,]),'PRODUCT':([14,26,28,29,30,31,32,35,58,61,63,64,66,68,69,70,71,72,73,74,81,88,89,106,107,],[-51,59,-48,-49,-52,-53,-54,-51,59,59,59,59,59,59,59,59,59,59,59,59,-50,-46,-47,59,59,]),'DIVIDE':([14,26,28,29,30,31,32,35,58,61,63,64,66,68,69,70,71,72,73,74,81,88,89,106,107,],[-51,60,-48,-49,-52,-53,-54,-51,60,60,60,60,60,60,60,60,60,60,60,60,-50,-46,-47,60,60,]),'IN':([26,28,29,30,31,32,34,35,58,61,63,64,66,68,69,70,71,72,73,74,81,88,89,106,107,],[-45,-48,-49,-52,-53,-54,62,-51,-31,-32,-33,-34,-39,-37,-38,-40,-41,-42,-43,-44,-50,-46,-47,-35,-36,]),'RIGHT_PAREN':([26,28,29,30,31,32,35,48,51,58,61,63,64,66,68,69,70,71,72,73,74,77,78,81,83,84,86,87,88,89,103,106,107,109,111,112,124,],[-45,-48,-49,-52,-53,-54,-51,76,81,-31,-32,-33,-34,-39,-37,-38,-40,-41,-42,-43,-44,95,-27,-50,100,101,102,104,-46,-47,116,-35,-36,-26,118,120,126,]),'COMMA':([26,28,29,30,31,32,35,58,61,63,64,66,68,69,70,71,72,73,74,78,81,88,89,106,107,],[-45,-48,-49,-52,-53,-54,-51,-31,-32,-33,-34,-39,-37,-38,-40,-41,-42,-43,-44,96,-50,-46,-47,-35,-36,]),'TO':([26,28,29,30,31,32,35,58,61,63,64,66,68,69,70,71,72,73,74,80,81,88,89,106,107,],[-45,-48,-49,-52,-53,-54,-51,-31,-32,-33,-34,-39,-37,-38,-40,-41,-42,-43,-44,98,-50,-46,-47,-35,-36,]),'STEP':([26,28,29,30,31,32,35,58,61,63,64,66,68,69,70,71,72,73,74,81,88,89,106,107,111,],[-45,-48,-49,-52,-53,-54,-51,-31,-32,-33,-34,-39,-37,-38,-40,-41,-42,-43,-44,-50,-46,-47,-35,-36,119,]),'GREATER':([39,],[65,]),'LESS':([39,],[67,]),'THAN':([65,67,],[91,92,]),'ELSE':([85,114,],[-22,121,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,22,],[2,33,55,]),'statement':([0,3,22,],[3,3,3,]),'assignment_statement':([0,3,22,],[4,4,4,]),'expression_statement':([0,3,22,],[5,5,5,]),'iterative_statement':([0,3,22,],[6,6,6,]),'conditional_statement':([0,3,22,],[7,7,7,]),'compound_statement':([0,3,19,22,100,101,104,116,118,121,126,],[8,8,52,8,113,114,117,122,123,125,127,]),'print_statement':([0,3,22,],[9,9,9,]),'function_statement':([0,3,22,],[10,10,10,]),'function_call':([0,3,22,],[11,11,11,]),'expression':([0,3,12,18,22,47,48,50,53,54,56,79,87,96,98,99,119,],[13,13,34,51,13,75,78,80,83,84,78,97,78,78,111,112,124,]),'term':([0,3,12,18,22,25,27,37,38,39,40,41,42,43,44,45,46,47,48,50,53,54,56,79,87,91,92,96,98,99,119,],[26,26,26,26,26,58,61,63,64,66,68,69,70,71,72,73,74,26,26,26,26,26,26,26,26,106,107,26,26,26,26,]),'factor':([0,3,12,18,22,25,27,37,38,39,40,41,42,43,44,45,46,47,48,50,53,54,56,59,60,79,87,91,92,96,98,99,119,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,88,89,28,28,28,28,28,28,28,28,]),'literal':([0,3,12,18,22,25,27,37,38,39,40,41,42,43,44,45,46,47,48,50,53,54,56,59,60,79,87,91,92,96,98,99,119,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'arguments':([48,56,87,96,],[77,86,103,109,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',17),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',25),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',26),
  ('statement -> iterative_statement','statement',1,'p_statement','parser.py',27),
  ('statement -> conditional_statement','statement',1,'p_statement','parser.py',28),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',29),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',30),
  ('statement -> function_statement','statement',1,'p_statement','parser.py',31),
  ('statement -> function_call','statement',1,'p_statement','parser.py',32),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',39),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list','parser.py',40),
  ('function_call -> IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON','function_call',4,'p_function_call_empty','parser.py',49),
  ('function_call -> IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN SEMICOLON','function_call',5,'p_function_call','parser.py',53),
  ('function_statement -> FUNCTION IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN compound_statement','function_statement',6,'p_function_statement','parser.py',57),
  ('function_statement -> FUNCTION IDENTIFIER LEFT_PAREN RIGHT_PAREN compound_statement','function_statement',5,'p_function_statement_empty','parser.py',62),
  ('conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE compound_statement','conditional_statement',7,'p_conditional_statement_if_else','parser.py',67),
  ('conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement','conditional_statement',5,'p_conditional_statement_if','parser.py',71),
  ('iterative_statement -> FOR LEFT_PAREN expression TO expression RIGHT_PAREN compound_statement','iterative_statement',7,'p_iterative_statement_for','parser.py',75),
  ('iterative_statement -> FOR LEFT_PAREN expression TO expression STEP expression RIGHT_PAREN compound_statement','iterative_statement',9,'p_iterative_statement_for_step','parser.py',79),
  ('iterative_statement -> DO compound_statement WHILE LEFT_PAREN expression RIGHT_PAREN','iterative_statement',6,'p_iterative_statement_do_while','parser.py',83),
  ('iterative_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN compound_statement','iterative_statement',5,'p_iterative_statement_while','parser.py',87),
  ('compound_statement -> LEFT_BRACE statement_list RIGHT_BRACE','compound_statement',3,'p_compound_statement','parser.py',91),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_statement_expression','parser.py',95),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_statement_expression','parser.py',96),
  ('print_statement -> LOG LEFT_PAREN arguments RIGHT_PAREN SEMICOLON','print_statement',5,'p_statement_log','parser.py',107),
  ('arguments -> expression COMMA arguments','arguments',3,'p_arguments','parser.py',111),
  ('arguments -> expression','arguments',1,'p_arguments_single','parser.py',115),
  ('assignment_statement -> PUT expression IN IDENTIFIER SEMICOLON','assignment_statement',5,'p_statement_descriptive','parser.py',122),
  ('assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',4,'p_statement_assignment','parser.py',126),
  ('assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',5,'p_statement_assignment_let','parser.py',130),
  ('expression -> MINUS term','expression',2,'p_expression_negative','parser.py',138),
  ('expression -> NOT term','expression',2,'p_expression_not','parser.py',142),
  ('expression -> expression GTE term','expression',3,'p_expression_gte','parser.py',146),
  ('expression -> expression LTE term','expression',3,'p_expression_lte','parser.py',150),
  ('expression -> expression IS GREATER THAN term','expression',5,'p_expression_gt_descriptive','parser.py',154),
  ('expression -> expression IS LESS THAN term','expression',5,'p_expression_lt_descriptive','parser.py',158),
  ('expression -> expression GT term','expression',3,'p_expression_gt','parser.py',162),
  ('expression -> expression LT term','expression',3,'p_expression_lt','parser.py',166),
  ('expression -> expression IS term','expression',3,'p_expression_equal_is','parser.py',170),
  ('expression -> expression EQUALS term','expression',3,'p_expression_equal','parser.py',174),
  ('expression -> expression OR term','expression',3,'p_expression_or','parser.py',178),
  ('expression -> expression AND term','expression',3,'p_expression_and','parser.py',182),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','parser.py',186),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','parser.py',190),
  ('expression -> term','expression',1,'p_expression_term','parser.py',195),
  ('term -> term PRODUCT factor','term',3,'p_term_factor_product','parser.py',204),
  ('term -> term DIVIDE factor','term',3,'p_term_factor_divide','parser.py',208),
  ('term -> factor','term',1,'p_term_factor','parser.py',212),
  ('factor -> literal','factor',1,'p_factor','parser.py',220),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor_expression','parser.py',224),
  ('literal -> IDENTIFIER','literal',1,'p_literal_identifier','parser.py',232),
  ('literal -> DOUBLE','literal',1,'p_literal','parser.py',238),
  ('literal -> INTEGER','literal',1,'p_literal','parser.py',239),
  ('literal -> STRING','literal',1,'p_literal','parser.py',240),
]
