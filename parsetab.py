
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftCOMMArightASSIGNleftORleftANDleftEQUALSleftLTLTEGTGTEleftPLUSMINUSleftPRODUCTDIVIDErightNOTrightINCREMENTDECREMENTAND ASSIGN BREAK COMMA DECREMENT DIVIDE DO DOUBLE ELSE EQUALS FALSE FOR FUNCTION GREATER GT GTE IDENTIFIER IF IN INCREMENT INTEGER IS LEFT_BRACE LEFT_PAREN LESS LET LOG LT LTE MINUS MODULUS NOT OBJECT OR PLUS PRODUCT PUT RETURN RIGHT_BRACE RIGHT_PAREN SEMICOLON SKIP STEP STRING STRUCT THAN TO TRUE TYPE_BOOL TYPE_CHAR TYPE_DOUBLE TYPE_INT TYPE_STRING WHILE\n        type_specifier : TYPE_BOOL\n                       | TYPE_INT\n                       | TYPE_CHAR\n                       | TYPE_DOUBLE\n                       | TYPE_STRING\n    arguments   : expression COMMA argumentsfunction_call : IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLONassignment_statement : PUT expression IN IDENTIFIER SEMICOLONconditional_statement : IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE compound_statementexpression_statement : expression SEMICOLON\n       expression_statement : SEMICOLON\n    \n        statement : assignment_statement\n                  | expression_statement\n                  | iterative_statement\n                  | conditional_statement\n                  | compound_statement\n                  | print_statement\n                  | function_statement\n                  | function_call\n    iterative_statement : DO compound_statement WHILE LEFT_PAREN expression RIGHT_PARENiterative_statement : FOR LEFT_PAREN expression TO expression RIGHT_PAREN compound_statementiterative_statement : WHILE LEFT_PAREN expression RIGHT_PAREN compound_statement\n        statement_list : statement statement_list\n                       |\n    print_statement : LOG LEFT_PAREN arguments RIGHT_PAREN SEMICOLONfunction_statement : FUNCTION IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN compound_statementcompound_statement : LEFT_BRACE statement_list RIGHT_BRACEprogram : statement_listexpression : IDENTIFIER INCREMENTfactor : literalterm : term PRODUCT factorarguments : expressionfunction_call : IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN SEMICOLONassignment_statement : IDENTIFIER ASSIGN expression SEMICOLONconditional_statement : IF LEFT_PAREN expression RIGHT_PAREN compound_statementiterative_statement : FOR LEFT_PAREN expression TO expression STEP expression RIGHT_PAREN compound_statementliteral : IDENTIFIERfunction_statement : FUNCTION IDENTIFIER LEFT_PAREN RIGHT_PAREN compound_statementexpression : IDENTIFIER DECREMENTfactor : LEFT_PAREN expression RIGHT_PARENterm : term DIVIDE factorassignment_statement : LET IDENTIFIER ASSIGN expression SEMICOLONiterative_statement : FOR expression TO expression compound_statement\n\n    literal : DOUBLE\n            | INTEGER\n            | STRING\n            | TRUE\n            | FALSE\n\n    expression : MINUS termterm : factorassignment_statement : type_specifier IDENTIFIER ASSIGN expression SEMICOLONiterative_statement : FOR expression TO expression STEP expression compound_statementexpression : NOT termexpression : expression GTE termexpression : expression LTE termexpression : expression IS GREATER THAN termexpression : expression IS LESS THAN termexpression : expression GT termexpression : expression LT termexpression : expression IS termexpression : expression EQUALS termexpression : expression OR termexpression : expression AND termexpression : expression PLUS termexpression : expression MINUS termexpression : term'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,15,41,44,100,108,109,122,125,127,128,130,132,134,135,137,138,143,144,146,147,149,],[-24,0,-28,-24,-12,-13,-14,-15,-16,-17,-18,-19,-11,-23,-10,-27,-34,-7,-8,-33,-42,-51,-22,-43,-35,-25,-38,-20,-26,-21,-52,-9,-36,]),'PUT':([0,3,4,5,6,7,8,9,10,11,15,23,44,100,108,109,122,125,127,128,130,132,134,135,137,138,143,144,146,147,149,],[12,12,-12,-13,-14,-15,-16,-17,-18,-19,-11,12,-10,-27,-34,-7,-8,-33,-42,-51,-22,-43,-35,-25,-38,-20,-26,-21,-52,-9,-36,]),'IDENTIFIER':([0,3,4,5,6,7,8,9,10,11,12,15,16,17,20,21,23,25,26,27,28,29,30,31,33,44,45,46,47,48,49,50,51,52,53,54,55,56,62,64,66,68,72,73,75,92,93,98,100,102,106,107,108,109,111,114,116,122,125,127,128,130,132,133,134,135,137,138,140,143,144,146,147,149,],[14,14,-12,-13,-14,-15,-16,-17,-18,-19,43,-11,59,60,43,43,14,69,-1,-2,-3,-4,-5,71,71,-10,71,71,71,71,71,71,71,71,71,71,43,43,43,43,43,43,71,71,105,43,43,43,-27,43,71,71,-34,-7,43,43,43,-8,-33,-42,-51,-22,-43,43,-35,-25,-38,-20,43,-26,-21,-52,-9,-36,]),'LET':([0,3,4,5,6,7,8,9,10,11,15,23,44,100,108,109,122,125,127,128,130,132,134,135,137,138,143,144,146,147,149,],[16,16,-12,-13,-14,-15,-16,-17,-18,-19,-11,16,-10,-27,-34,-7,-8,-33,-42,-51,-22,-43,-35,-25,-38,-20,-26,-21,-52,-9,-36,]),'SEMICOLON':([0,3,4,5,6,7,8,9,10,11,13,14,15,23,32,34,35,36,37,38,39,40,43,44,57,58,70,71,74,76,77,79,81,82,83,84,85,86,87,88,89,96,100,103,104,105,108,109,110,112,113,119,122,123,124,125,127,128,130,132,134,135,137,138,143,144,146,147,149,],[15,15,-12,-13,-14,-15,-16,-17,-18,-19,44,-37,-11,15,-66,-50,-30,-44,-45,-46,-47,-48,-37,-10,-29,-39,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,108,109,-40,-27,-31,-41,122,-34,-7,125,127,128,135,-8,-56,-57,-33,-42,-51,-22,-43,-35,-25,-38,-20,-26,-21,-52,-9,-36,]),'DO':([0,3,4,5,6,7,8,9,10,11,15,23,44,100,108,109,122,125,127,128,130,132,134,135,137,138,143,144,146,147,149,],[18,18,-12,-13,-14,-15,-16,-17,-18,-19,-11,18,-10,-27,-34,-7,-8,-33,-42,-51,-22,-43,-35,-25,-38,-20,-26,-21,-52,-9,-36,]),'FOR':([0,3,4,5,6,7,8,9,10,11,15,23,44,100,108,109,122,125,127,128,130,132,134,135,137,138,143,144,146,147,149,],[21,21,-12,-13,-14,-15,-16,-17,-18,-19,-11,21,-10,-27,-34,-7,-8,-33,-42,-51,-22,-43,-35,-25,-38,-20,-26,-21,-52,-9,-36,]),'WHILE':([0,3,4,5,6,7,8,9,10,11,15,23,44,61,100,108,109,122,125,127,128,130,132,134,135,137,138,143,144,146,147,149,],[19,19,-12,-13,-14,-15,-16,-17,-18,-19,-11,19,-10,94,-27,-34,-7,-8,-33,-42,-51,-22,-43,-35,-25,-38,-20,-26,-21,-52,-9,-36,]),'IF':([0,3,4,5,6,7,8,9,10,11,15,23,44,100,108,109,122,125,127,128,130,132,134,135,137,138,143,144,146,147,149,],[22,22,-12,-13,-14,-15,-16,-17,-18,-19,-11,22,-10,-27,-34,-7,-8,-33,-42,-51,-22,-43,-35,-25,-38,-20,-26,-21,-52,-9,-36,]),'LEFT_BRACE':([0,3,4,5,6,7,8,9,10,11,15,18,23,32,34,35,36,37,38,39,40,43,44,57,58,70,71,74,76,77,79,81,82,83,84,85,86,87,96,100,103,104,108,109,115,117,118,121,122,123,124,125,127,128,130,132,134,135,136,137,138,139,141,142,143,144,146,147,148,149,],[23,23,-12,-13,-14,-15,-16,-17,-18,-19,-11,23,23,-66,-50,-30,-44,-45,-46,-47,-48,-37,-10,-29,-39,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,-40,-27,-31,-41,-34,-7,23,23,23,23,-8,-56,-57,-33,-42,-51,-22,-43,-35,-25,23,-38,-20,23,23,23,-26,-21,-52,-9,23,-36,]),'LOG':([0,3,4,5,6,7,8,9,10,11,15,23,44,100,108,109,122,125,127,128,130,132,134,135,137,138,143,144,146,147,149,],[24,24,-12,-13,-14,-15,-16,-17,-18,-19,-11,24,-10,-27,-34,-7,-8,-33,-42,-51,-22,-43,-35,-25,-38,-20,-26,-21,-52,-9,-36,]),'FUNCTION':([0,3,4,5,6,7,8,9,10,11,15,23,44,100,108,109,122,125,127,128,130,132,134,135,137,138,143,144,146,147,149,],[25,25,-12,-13,-14,-15,-16,-17,-18,-19,-11,25,-10,-27,-34,-7,-8,-33,-42,-51,-22,-43,-35,-25,-38,-20,-26,-21,-52,-9,-36,]),'TYPE_BOOL':([0,3,4,5,6,7,8,9,10,11,15,23,44,100,108,109,122,125,127,128,130,132,134,135,137,138,143,144,146,147,149,],[26,26,-12,-13,-14,-15,-16,-17,-18,-19,-11,26,-10,-27,-34,-7,-8,-33,-42,-51,-22,-43,-35,-25,-38,-20,-26,-21,-52,-9,-36,]),'TYPE_INT':([0,3,4,5,6,7,8,9,10,11,15,23,44,100,108,109,122,125,127,128,130,132,134,135,137,138,143,144,146,147,149,],[27,27,-12,-13,-14,-15,-16,-17,-18,-19,-11,27,-10,-27,-34,-7,-8,-33,-42,-51,-22,-43,-35,-25,-38,-20,-26,-21,-52,-9,-36,]),'TYPE_CHAR':([0,3,4,5,6,7,8,9,10,11,15,23,44,100,108,109,122,125,127,128,130,132,134,135,137,138,143,144,146,147,149,],[28,28,-12,-13,-14,-15,-16,-17,-18,-19,-11,28,-10,-27,-34,-7,-8,-33,-42,-51,-22,-43,-35,-25,-38,-20,-26,-21,-52,-9,-36,]),'TYPE_DOUBLE':([0,3,4,5,6,7,8,9,10,11,15,23,44,100,108,109,122,125,127,128,130,132,134,135,137,138,143,144,146,147,149,],[29,29,-12,-13,-14,-15,-16,-17,-18,-19,-11,29,-10,-27,-34,-7,-8,-33,-42,-51,-22,-43,-35,-25,-38,-20,-26,-21,-52,-9,-36,]),'TYPE_STRING':([0,3,4,5,6,7,8,9,10,11,15,23,44,100,108,109,122,125,127,128,130,132,134,135,137,138,143,144,146,147,149,],[30,30,-12,-13,-14,-15,-16,-17,-18,-19,-11,30,-10,-27,-34,-7,-8,-33,-42,-51,-22,-43,-35,-25,-38,-20,-26,-21,-52,-9,-36,]),'MINUS':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,20,21,23,32,34,35,36,37,38,39,40,42,43,44,55,56,57,58,62,63,64,65,66,68,70,71,74,76,77,79,81,82,83,84,85,86,87,88,91,92,93,95,96,97,98,99,100,102,103,104,108,109,111,112,113,114,116,117,122,123,124,125,127,128,129,130,131,132,133,134,135,137,138,140,141,143,144,145,146,147,149,],[31,31,-12,-13,-14,-15,-16,-17,-18,-19,31,54,-37,-11,31,31,31,-66,-50,-30,-44,-45,-46,-47,-48,54,-37,-10,31,31,-29,-39,31,54,31,54,31,31,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,54,54,31,31,54,-40,54,31,54,-27,31,-31,-41,-34,-7,31,54,54,31,31,54,-8,-56,-57,-33,-42,-51,54,-22,54,-43,31,-35,-25,-38,-20,31,54,-26,-21,54,-52,-9,-36,]),'NOT':([0,3,4,5,6,7,8,9,10,11,12,15,20,21,23,44,55,56,62,64,66,68,92,93,98,100,102,108,109,111,114,116,122,125,127,128,130,132,133,134,135,137,138,140,143,144,146,147,149,],[33,33,-12,-13,-14,-15,-16,-17,-18,-19,33,-11,33,33,33,-10,33,33,33,33,33,33,33,33,33,-27,33,-34,-7,33,33,33,-8,-33,-42,-51,-22,-43,33,-35,-25,-38,-20,33,-26,-21,-52,-9,-36,]),'LEFT_PAREN':([0,3,4,5,6,7,8,9,10,11,12,14,15,19,20,21,22,23,24,31,33,44,45,46,47,48,49,50,51,52,53,54,55,56,62,64,66,68,69,72,73,92,93,94,98,100,102,106,107,108,109,111,114,116,122,125,127,128,130,132,133,134,135,137,138,140,143,144,146,147,149,],[20,20,-12,-13,-14,-15,-16,-17,-18,-19,20,56,-11,62,20,64,66,20,68,20,20,-10,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,102,20,20,20,20,114,20,-27,20,20,20,-34,-7,20,20,20,-8,-33,-42,-51,-22,-43,20,-35,-25,-38,-20,20,-26,-21,-52,-9,-36,]),'DOUBLE':([0,3,4,5,6,7,8,9,10,11,12,15,20,21,23,31,33,44,45,46,47,48,49,50,51,52,53,54,55,56,62,64,66,68,72,73,92,93,98,100,102,106,107,108,109,111,114,116,122,125,127,128,130,132,133,134,135,137,138,140,143,144,146,147,149,],[36,36,-12,-13,-14,-15,-16,-17,-18,-19,36,-11,36,36,36,36,36,-10,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-27,36,36,36,-34,-7,36,36,36,-8,-33,-42,-51,-22,-43,36,-35,-25,-38,-20,36,-26,-21,-52,-9,-36,]),'INTEGER':([0,3,4,5,6,7,8,9,10,11,12,15,20,21,23,31,33,44,45,46,47,48,49,50,51,52,53,54,55,56,62,64,66,68,72,73,92,93,98,100,102,106,107,108,109,111,114,116,122,125,127,128,130,132,133,134,135,137,138,140,143,144,146,147,149,],[37,37,-12,-13,-14,-15,-16,-17,-18,-19,37,-11,37,37,37,37,37,-10,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-27,37,37,37,-34,-7,37,37,37,-8,-33,-42,-51,-22,-43,37,-35,-25,-38,-20,37,-26,-21,-52,-9,-36,]),'STRING':([0,3,4,5,6,7,8,9,10,11,12,15,20,21,23,31,33,44,45,46,47,48,49,50,51,52,53,54,55,56,62,64,66,68,72,73,92,93,98,100,102,106,107,108,109,111,114,116,122,125,127,128,130,132,133,134,135,137,138,140,143,144,146,147,149,],[38,38,-12,-13,-14,-15,-16,-17,-18,-19,38,-11,38,38,38,38,38,-10,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-27,38,38,38,-34,-7,38,38,38,-8,-33,-42,-51,-22,-43,38,-35,-25,-38,-20,38,-26,-21,-52,-9,-36,]),'TRUE':([0,3,4,5,6,7,8,9,10,11,12,15,20,21,23,31,33,44,45,46,47,48,49,50,51,52,53,54,55,56,62,64,66,68,72,73,92,93,98,100,102,106,107,108,109,111,114,116,122,125,127,128,130,132,133,134,135,137,138,140,143,144,146,147,149,],[39,39,-12,-13,-14,-15,-16,-17,-18,-19,39,-11,39,39,39,39,39,-10,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-27,39,39,39,-34,-7,39,39,39,-8,-33,-42,-51,-22,-43,39,-35,-25,-38,-20,39,-26,-21,-52,-9,-36,]),'FALSE':([0,3,4,5,6,7,8,9,10,11,12,15,20,21,23,31,33,44,45,46,47,48,49,50,51,52,53,54,55,56,62,64,66,68,72,73,92,93,98,100,102,106,107,108,109,111,114,116,122,125,127,128,130,132,133,134,135,137,138,140,143,144,146,147,149,],[40,40,-12,-13,-14,-15,-16,-17,-18,-19,40,-11,40,40,40,40,40,-10,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-27,40,40,40,-34,-7,40,40,40,-8,-33,-42,-51,-22,-43,40,-35,-25,-38,-20,40,-26,-21,-52,-9,-36,]),'RIGHT_BRACE':([3,4,5,6,7,8,9,10,11,15,23,41,44,67,100,108,109,122,125,127,128,130,132,134,135,137,138,143,144,146,147,149,],[-24,-12,-13,-14,-15,-16,-17,-18,-19,-11,-24,-23,-10,100,-27,-34,-7,-8,-33,-42,-51,-22,-43,-35,-25,-38,-20,-26,-21,-52,-9,-36,]),'GTE':([13,14,32,34,35,36,37,38,39,40,42,43,57,58,63,65,70,71,74,76,77,79,81,82,83,84,85,86,87,88,91,95,96,97,99,103,104,112,113,117,123,124,129,131,141,145,],[45,-37,-66,-50,-30,-44,-45,-46,-47,-48,45,-37,-29,-39,45,45,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,45,45,45,-40,45,45,-31,-41,45,45,45,-56,-57,45,45,45,45,]),'LTE':([13,14,32,34,35,36,37,38,39,40,42,43,57,58,63,65,70,71,74,76,77,79,81,82,83,84,85,86,87,88,91,95,96,97,99,103,104,112,113,117,123,124,129,131,141,145,],[46,-37,-66,-50,-30,-44,-45,-46,-47,-48,46,-37,-29,-39,46,46,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,46,46,46,-40,46,46,-31,-41,46,46,46,-56,-57,46,46,46,46,]),'IS':([13,14,32,34,35,36,37,38,39,40,42,43,57,58,63,65,70,71,74,76,77,79,81,82,83,84,85,86,87,88,91,95,96,97,99,103,104,112,113,117,123,124,129,131,141,145,],[47,-37,-66,-50,-30,-44,-45,-46,-47,-48,47,-37,-29,-39,47,47,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,47,47,47,-40,47,47,-31,-41,47,47,47,-56,-57,47,47,47,47,]),'GT':([13,14,32,34,35,36,37,38,39,40,42,43,57,58,63,65,70,71,74,76,77,79,81,82,83,84,85,86,87,88,91,95,96,97,99,103,104,112,113,117,123,124,129,131,141,145,],[48,-37,-66,-50,-30,-44,-45,-46,-47,-48,48,-37,-29,-39,48,48,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,48,48,48,-40,48,48,-31,-41,48,48,48,-56,-57,48,48,48,48,]),'LT':([13,14,32,34,35,36,37,38,39,40,42,43,57,58,63,65,70,71,74,76,77,79,81,82,83,84,85,86,87,88,91,95,96,97,99,103,104,112,113,117,123,124,129,131,141,145,],[49,-37,-66,-50,-30,-44,-45,-46,-47,-48,49,-37,-29,-39,49,49,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,49,49,49,-40,49,49,-31,-41,49,49,49,-56,-57,49,49,49,49,]),'EQUALS':([13,14,32,34,35,36,37,38,39,40,42,43,57,58,63,65,70,71,74,76,77,79,81,82,83,84,85,86,87,88,91,95,96,97,99,103,104,112,113,117,123,124,129,131,141,145,],[50,-37,-66,-50,-30,-44,-45,-46,-47,-48,50,-37,-29,-39,50,50,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,50,50,50,-40,50,50,-31,-41,50,50,50,-56,-57,50,50,50,50,]),'OR':([13,14,32,34,35,36,37,38,39,40,42,43,57,58,63,65,70,71,74,76,77,79,81,82,83,84,85,86,87,88,91,95,96,97,99,103,104,112,113,117,123,124,129,131,141,145,],[51,-37,-66,-50,-30,-44,-45,-46,-47,-48,51,-37,-29,-39,51,51,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,51,51,51,-40,51,51,-31,-41,51,51,51,-56,-57,51,51,51,51,]),'AND':([13,14,32,34,35,36,37,38,39,40,42,43,57,58,63,65,70,71,74,76,77,79,81,82,83,84,85,86,87,88,91,95,96,97,99,103,104,112,113,117,123,124,129,131,141,145,],[52,-37,-66,-50,-30,-44,-45,-46,-47,-48,52,-37,-29,-39,52,52,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,52,52,52,-40,52,52,-31,-41,52,52,52,-56,-57,52,52,52,52,]),'PLUS':([13,14,32,34,35,36,37,38,39,40,42,43,57,58,63,65,70,71,74,76,77,79,81,82,83,84,85,86,87,88,91,95,96,97,99,103,104,112,113,117,123,124,129,131,141,145,],[53,-37,-66,-50,-30,-44,-45,-46,-47,-48,53,-37,-29,-39,53,53,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,53,53,53,-40,53,53,-31,-41,53,53,53,-56,-57,53,53,53,53,]),'ASSIGN':([14,59,60,],[55,92,93,]),'INCREMENT':([14,43,],[57,57,]),'DECREMENT':([14,43,],[58,58,]),'PRODUCT':([14,32,34,35,36,37,38,39,40,43,70,71,74,76,77,79,81,82,83,84,85,86,87,96,103,104,123,124,],[-37,72,-50,-30,-44,-45,-46,-47,-48,-37,72,-37,72,72,72,72,72,72,72,72,72,72,72,-40,-31,-41,72,72,]),'DIVIDE':([14,32,34,35,36,37,38,39,40,43,70,71,74,76,77,79,81,82,83,84,85,86,87,96,103,104,123,124,],[-37,73,-50,-30,-44,-45,-46,-47,-48,-37,73,-37,73,73,73,73,73,73,73,73,73,73,73,-40,-31,-41,73,73,]),'IN':([32,34,35,36,37,38,39,40,42,43,57,58,70,71,74,76,77,79,81,82,83,84,85,86,87,96,103,104,123,124,],[-66,-50,-30,-44,-45,-46,-47,-48,75,-37,-29,-39,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,-40,-31,-41,-56,-57,]),'RIGHT_PAREN':([32,34,35,36,37,38,39,40,43,56,57,58,63,70,71,74,76,77,79,81,82,83,84,85,86,87,90,91,95,96,97,99,101,102,103,104,120,123,124,126,129,131,145,],[-66,-50,-30,-44,-45,-46,-47,-48,-37,89,-29,-39,96,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,110,-32,115,-40,96,118,119,121,-31,-41,136,-56,-57,-6,138,139,148,]),'TO':([32,34,35,36,37,38,39,40,43,57,58,65,70,71,74,76,77,79,81,82,83,84,85,86,87,96,97,103,104,123,124,],[-66,-50,-30,-44,-45,-46,-47,-48,-37,-29,-39,98,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,-40,116,-31,-41,-56,-57,]),'COMMA':([32,34,35,36,37,38,39,40,43,57,58,70,71,74,76,77,79,81,82,83,84,85,86,87,91,96,103,104,123,124,],[-66,-50,-30,-44,-45,-46,-47,-48,-37,-29,-39,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,111,-40,-31,-41,-56,-57,]),'STEP':([32,34,35,36,37,38,39,40,43,57,58,70,71,74,76,77,79,81,82,83,84,85,86,87,96,103,104,117,123,124,131,],[-66,-50,-30,-44,-45,-46,-47,-48,-37,-29,-39,-49,-37,-53,-54,-55,-60,-58,-59,-61,-62,-63,-64,-65,-40,-31,-41,133,-56,-57,140,]),'GREATER':([47,],[78,]),'LESS':([47,],[80,]),'THAN':([78,80,],[106,107,]),'ELSE':([100,134,],[-27,142,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,23,],[2,41,67,]),'statement':([0,3,23,],[3,3,3,]),'assignment_statement':([0,3,23,],[4,4,4,]),'expression_statement':([0,3,23,],[5,5,5,]),'iterative_statement':([0,3,23,],[6,6,6,]),'conditional_statement':([0,3,23,],[7,7,7,]),'compound_statement':([0,3,18,23,115,117,118,121,136,139,141,142,148,],[8,8,61,8,130,132,134,137,143,144,146,147,149,]),'print_statement':([0,3,23,],[9,9,9,]),'function_statement':([0,3,23,],[10,10,10,]),'function_call':([0,3,23,],[11,11,11,]),'expression':([0,3,12,20,21,23,55,56,62,64,66,68,92,93,98,102,111,114,116,133,140,],[13,13,42,63,65,13,88,91,95,97,99,91,112,113,117,91,91,129,131,141,145,]),'type_specifier':([0,3,23,],[17,17,17,]),'term':([0,3,12,20,21,23,31,33,45,46,47,48,49,50,51,52,53,54,55,56,62,64,66,68,92,93,98,102,106,107,111,114,116,133,140,],[32,32,32,32,32,32,70,74,76,77,79,81,82,83,84,85,86,87,32,32,32,32,32,32,32,32,32,32,123,124,32,32,32,32,32,]),'factor':([0,3,12,20,21,23,31,33,45,46,47,48,49,50,51,52,53,54,55,56,62,64,66,68,72,73,92,93,98,102,106,107,111,114,116,133,140,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,103,104,34,34,34,34,34,34,34,34,34,34,34,]),'literal':([0,3,12,20,21,23,31,33,45,46,47,48,49,50,51,52,53,54,55,56,62,64,66,68,72,73,92,93,98,102,106,107,111,114,116,133,140,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'arguments':([56,68,102,111,],[90,101,120,126,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('type_specifier -> TYPE_BOOL','type_specifier',1,'p_type_specifier','Type.py',3),
  ('type_specifier -> TYPE_INT','type_specifier',1,'p_type_specifier','Type.py',4),
  ('type_specifier -> TYPE_CHAR','type_specifier',1,'p_type_specifier','Type.py',5),
  ('type_specifier -> TYPE_DOUBLE','type_specifier',1,'p_type_specifier','Type.py',6),
  ('type_specifier -> TYPE_STRING','type_specifier',1,'p_type_specifier','Type.py',7),
  ('arguments -> expression COMMA arguments','arguments',3,'p_arguments','Arguments.py',4),
  ('function_call -> IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON','function_call',4,'p_function_call_empty','Call.py',4),
  ('assignment_statement -> PUT expression IN IDENTIFIER SEMICOLON','assignment_statement',5,'p_rule_01','Assignment.py',4),
  ('conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE compound_statement','conditional_statement',7,'p_if_01','If.py',4),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_statement_expression','Expression.py',4),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_statement_expression','Expression.py',5),
  ('statement -> assignment_statement','statement',1,'p_statement','Generic.py',5),
  ('statement -> expression_statement','statement',1,'p_statement','Generic.py',6),
  ('statement -> iterative_statement','statement',1,'p_statement','Generic.py',7),
  ('statement -> conditional_statement','statement',1,'p_statement','Generic.py',8),
  ('statement -> compound_statement','statement',1,'p_statement','Generic.py',9),
  ('statement -> print_statement','statement',1,'p_statement','Generic.py',10),
  ('statement -> function_statement','statement',1,'p_statement','Generic.py',11),
  ('statement -> function_call','statement',1,'p_statement','Generic.py',12),
  ('iterative_statement -> DO compound_statement WHILE LEFT_PAREN expression RIGHT_PAREN','iterative_statement',6,'p_do_while','DoWhile.py',4),
  ('iterative_statement -> FOR LEFT_PAREN expression TO expression RIGHT_PAREN compound_statement','iterative_statement',7,'p_for_01','For.py',4),
  ('iterative_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN compound_statement','iterative_statement',5,'p_while_strict','While.py',4),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','List.py',5),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list','List.py',6),
  ('print_statement -> LOG LEFT_PAREN arguments RIGHT_PAREN SEMICOLON','print_statement',5,'p_statement_log','Print.py',4),
  ('function_statement -> FUNCTION IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN compound_statement','function_statement',6,'p_function_statement','Generic.py',5),
  ('compound_statement -> LEFT_BRACE statement_list RIGHT_BRACE','compound_statement',3,'p_compound_statement','Compound.py',5),
  ('program -> statement_list','program',1,'p_program','Program.py',6),
  ('expression -> IDENTIFIER INCREMENT','expression',2,'p_expression_inc','Expression.py',7),
  ('factor -> literal','factor',1,'p_factor','Factor.py',7),
  ('term -> term PRODUCT factor','term',3,'p_term_factor_product','Term.py',7),
  ('arguments -> expression','arguments',1,'p_arguments_single','Arguments.py',8),
  ('function_call -> IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN SEMICOLON','function_call',5,'p_function_call','Call.py',8),
  ('assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',4,'p_rule_02','Assignment.py',8),
  ('conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement','conditional_statement',5,'p_if_02','If.py',8),
  ('iterative_statement -> FOR LEFT_PAREN expression TO expression STEP expression RIGHT_PAREN compound_statement','iterative_statement',9,'p_for_02','For.py',8),
  ('literal -> IDENTIFIER','literal',1,'p_literal_identifier','Literal.py',9),
  ('function_statement -> FUNCTION IDENTIFIER LEFT_PAREN RIGHT_PAREN compound_statement','function_statement',5,'p_function_statement_empty','Generic.py',10),
  ('expression -> IDENTIFIER DECREMENT','expression',2,'p_expression_dec','Expression.py',11),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor_expression','Factor.py',11),
  ('term -> term DIVIDE factor','term',3,'p_term_factor_divide','Term.py',11),
  ('assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',5,'p_rule_03','Assignment.py',12),
  ('iterative_statement -> FOR expression TO expression compound_statement','iterative_statement',5,'p_for_03','For.py',12),
  ('literal -> DOUBLE','literal',1,'p_literal','Literal.py',16),
  ('literal -> INTEGER','literal',1,'p_literal','Literal.py',17),
  ('literal -> STRING','literal',1,'p_literal','Literal.py',18),
  ('literal -> TRUE','literal',1,'p_literal','Literal.py',19),
  ('literal -> FALSE','literal',1,'p_literal','Literal.py',20),
  ('expression -> MINUS term','expression',2,'p_expression_negative','Expression.py',15),
  ('term -> factor','term',1,'p_term_factor','Term.py',15),
  ('assignment_statement -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',5,'p_rule_04','Assignment.py',16),
  ('iterative_statement -> FOR expression TO expression STEP expression compound_statement','iterative_statement',7,'p_for_04','For.py',16),
  ('expression -> NOT term','expression',2,'p_expression_not','Expression.py',19),
  ('expression -> expression GTE term','expression',3,'p_expression_gte','Expression.py',23),
  ('expression -> expression LTE term','expression',3,'p_expression_lte','Expression.py',27),
  ('expression -> expression IS GREATER THAN term','expression',5,'p_expression_gt_descriptive','Expression.py',31),
  ('expression -> expression IS LESS THAN term','expression',5,'p_expression_lt_descriptive','Expression.py',35),
  ('expression -> expression GT term','expression',3,'p_expression_gt','Expression.py',39),
  ('expression -> expression LT term','expression',3,'p_expression_lt','Expression.py',43),
  ('expression -> expression IS term','expression',3,'p_expression_equal_is','Expression.py',47),
  ('expression -> expression EQUALS term','expression',3,'p_expression_equal','Expression.py',51),
  ('expression -> expression OR term','expression',3,'p_expression_or','Expression.py',55),
  ('expression -> expression AND term','expression',3,'p_expression_and','Expression.py',59),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','Expression.py',63),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','Expression.py',67),
  ('expression -> term','expression',1,'p_expression_term','Expression.py',72),
]
