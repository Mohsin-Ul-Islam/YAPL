
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftCOMMArightASSIGNleftORleftANDleftEQUALSleftLTLTEGTGTEleftPLUSMINUSleftEXPleftPRODUCTDIVIDErightNOTrightINCREMENTDECREMENTAND ASSIGN BREAK COMMA DECREMENT DIVIDE DO DOT DOUBLE ELSE EQUALS EXP FALSE FOR FUNCTION GREATER GT GTE IDENTIFIER IF IN INCREMENT INTEGER IS LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS LET LOG LT LTE MINUS MODULUS NOT OBJECT OR PLUS PRODUCT PUT QUOTE RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN SEMICOLON SKIP STEP STRING STRUCT THAN TO TRUE TYPE_BOOL TYPE_CHAR TYPE_DOUBLE TYPE_INT TYPE_STRING WHILE\n        type_specifier : TYPE_BOOL\n                       | TYPE_INT\n                       | TYPE_CHAR\n                       | TYPE_DOUBLE\n                       | TYPE_STRING\n    arguments   : expression COMMA argumentsfunction_call : IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLONconditional_statement : IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE compound_statementstruct_declaration : STRUCT IDENTIFIER LEFT_BRACE variable_declaration_list RIGHT_BRACEvariable_declaration_list : variable_declaration variable_declaration_listexpression_statement : expression SEMICOLON\n       expression_statement : SEMICOLON\n    \n        statement : assignment_statement\n                  | expression_statement\n                  | iterative_statement\n                  | conditional_statement\n                  | compound_statement\n                  | print_statement\n                  | function_call\n                  | variable_declaration\n    iterative_statement : DO compound_statement WHILE LEFT_PAREN expression RIGHT_PARENiterative_statement : WHILE LEFT_PAREN expression RIGHT_PAREN compound_statement\n        statement_list : statement statement_list\n    print_statement : LOG LEFT_PAREN arguments RIGHT_PAREN SEMICOLONempty :assignment_statement : PUT expression IN IDENTIFIER SEMICOLONcompound_statement : LEFT_BRACE statement_list RIGHT_BRACEfunction_declaration : FUNCTION IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN compound_statementdeclaration_list : statement declaration_listvariable_declaration : LET IDENTIFIER ASSIGN expression SEMICOLONiterative_statement : FOR LEFT_PAREN expression TO expression RIGHT_PAREN compound_statementprogram : declaration_listexpression : IDENTIFIER INCREMENTfactor : literalterm : term PRODUCT factorarguments : expressionfunction_call : IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN SEMICOLONconditional_statement : IF LEFT_PAREN expression RIGHT_PAREN compound_statementvariable_declaration_list : emptyiterative_statement : DO compound_statement WHILE LEFT_PAREN expression RIGHT_PAREN SEMICOLONiterative_statement : WHILE expression compound_statementassignment_statement : IDENTIFIER ASSIGN expression SEMICOLONdeclaration_list : function_declaration declaration_listvariable_declaration : type_specifier IDENTIFIER ASSIGN expression SEMICOLONiterative_statement : FOR LEFT_PAREN expression TO expression STEP expression RIGHT_PAREN compound_statementliteral : IDENTIFIER LEFT_BRACKET QUOTE IDENTIFIER QUOTE RIGHT_BRACKETfunction_declaration : FUNCTION IDENTIFIER LEFT_PAREN RIGHT_PAREN compound_statementstatement_list : emptyexpression : IDENTIFIER DECREMENTfactor : LEFT_PAREN expression RIGHT_PARENterm : term DIVIDE factorconditional_statement : IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE conditional_statementiterative_statement : DO compound_statement WHILE expressionassignment_statement : IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLONdeclaration_list : struct_declaration declaration_listvariable_declaration : type_specifier IDENTIFIER SEMICOLONiterative_statement : FOR expression TO expression compound_statementliteral : IDENTIFIER DOT IDENTIFIERexpression : MINUS termterm : factoriterative_statement : DO compound_statement WHILE expression SEMICOLONdeclaration_list : emptyvariable_declaration : LET IDENTIFIER SEMICOLONiterative_statement : FOR expression TO expression STEP expression compound_statementliteral : IDENTIFIERexpression : expression NOT ASSIGN termvariable_declaration : IDENTIFIER IDENTIFIER SEMICOLONiterative_statement : FOR LEFT_PAREN variable_declaration expression SEMICOLON assignment_statement RIGHT_PAREN compound_statement\n\n    literal : DOUBLE\n            | INTEGER\n            | STRING\n            | TRUE\n            | FALSE\n\n    expression : NOT termiterative_statement : FOR LEFT_PAREN variable_declaration expression SEMICOLON expression RIGHT_PAREN compound_statementexpression : expression EXP termiterative_statement : FOR LEFT_PAREN expression SEMICOLON expression SEMICOLON assignment_statement RIGHT_PAREN compound_statementexpression : expression GTE termiterative_statement : FOR LEFT_PAREN expression SEMICOLON expression SEMICOLON expression RIGHT_PAREN compound_statementexpression : expression LTE termexpression : expression IS GREATER THAN termexpression : expression IS LESS THAN termexpression : expression GT termexpression : expression LT termexpression : expression IS termexpression : expression EQUALS termexpression : expression OR termexpression : expression AND termexpression : expression PLUS termexpression : expression MINUS termexpression : term'
    
_lr_action_items = {'FUNCTION':([0,3,4,5,7,8,9,10,11,12,13,14,22,31,38,39,40,41,42,43,44,53,54,57,63,85,86,89,91,98,101,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,135,137,141,147,151,162,164,167,169,170,171,173,174,178,180,181,182,183,184,185,186,187,196,197,203,204,205,209,210,211,212,213,],[15,15,15,15,-13,-14,-15,-16,-17,-18,-19,-20,-12,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,-11,-59,-65,-74,-67,-50,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,-42,-7,-58,-66,-53,-47,-37,-9,-26,-81,-82,-61,-22,-57,-38,-24,-30,-44,-28,-54,-46,-21,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'STRUCT':([0,3,4,5,7,8,9,10,11,12,13,14,22,31,38,39,40,41,42,43,44,53,54,57,63,85,86,89,91,98,101,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,135,137,141,147,151,162,164,167,169,170,171,173,174,178,180,181,182,183,184,185,186,187,196,197,203,204,205,209,210,211,212,213,],[18,18,18,18,-13,-14,-15,-16,-17,-18,-19,-20,-12,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,-11,-59,-65,-74,-67,-50,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,-42,-7,-58,-66,-53,-47,-37,-9,-26,-81,-82,-61,-22,-57,-38,-24,-30,-44,-28,-54,-46,-21,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,22,31,38,39,40,41,42,43,44,45,46,47,53,54,57,63,85,86,89,91,98,101,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,135,137,141,147,151,162,164,167,169,170,171,173,174,178,180,181,182,183,184,185,186,187,196,197,203,204,205,209,210,211,212,213,],[-25,0,-32,-25,-25,-25,-62,-13,-14,-15,-16,-17,-18,-19,-20,-12,-91,-60,-34,-69,-70,-71,-72,-73,-29,-43,-55,-33,-49,-65,-11,-59,-65,-74,-67,-50,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,-42,-7,-58,-66,-53,-47,-37,-9,-26,-81,-82,-61,-22,-57,-38,-24,-30,-44,-28,-54,-46,-21,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'PUT':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,31,38,39,40,41,42,43,44,53,54,57,60,63,85,86,89,91,98,101,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,135,137,141,147,151,162,164,167,169,170,171,173,174,177,178,180,181,182,183,184,185,186,187,190,196,197,203,204,205,209,210,211,212,213,],[20,20,20,20,-13,-14,-15,-16,-17,-18,-19,-20,20,-12,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,20,-11,-59,-65,-74,-67,-50,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,-42,-7,-58,-66,-53,-47,-37,-9,-26,-81,-82,-61,-22,20,-57,-38,-24,-30,-44,-28,-54,-46,-21,20,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'IDENTIFIER':([0,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24,25,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,50,51,52,53,54,57,60,63,65,66,67,68,69,70,71,72,73,74,75,77,79,81,82,85,86,87,88,89,90,91,97,98,99,100,101,103,104,105,106,107,109,111,112,113,114,115,116,117,118,120,122,123,124,127,128,129,130,131,132,135,136,137,139,141,142,144,147,148,149,150,151,153,154,162,164,167,169,170,171,173,174,177,178,179,180,181,182,183,184,185,186,187,189,190,196,197,203,204,205,209,210,211,212,213,],[16,16,16,16,-13,-14,-15,-16,-17,-18,-19,-20,48,49,57,58,16,57,-12,57,57,83,84,86,-91,86,-1,-2,-3,-4,-5,-60,-34,-69,-70,-71,-72,-73,57,93,57,-33,-49,-65,16,-11,86,86,86,86,86,86,86,86,86,86,86,57,123,57,57,-59,-65,86,86,-74,57,-67,140,-50,141,142,-27,146,86,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,57,-41,57,49,57,57,-63,57,-56,-35,-51,-42,57,-7,57,-58,49,142,-66,86,86,57,-53,57,57,-47,-37,-9,-26,-81,-82,-61,-22,193,-57,57,-38,-24,-30,-44,-28,-54,-46,-21,57,193,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'SEMICOLON':([0,3,4,5,7,8,9,10,11,12,13,14,16,19,21,22,31,38,39,40,41,42,43,44,49,53,54,57,60,63,83,84,85,86,89,91,92,93,94,98,101,105,106,107,109,111,112,113,114,115,116,117,120,121,123,128,130,131,132,135,137,138,141,146,147,151,155,158,159,160,162,163,164,167,169,170,171,173,174,176,178,180,181,182,183,184,185,186,187,196,197,203,204,205,209,210,211,212,213,],[22,22,22,22,-13,-14,-15,-16,-17,-18,-19,-20,-65,22,63,-12,-91,-60,-34,-69,-70,-71,-72,-73,91,-33,-49,-65,22,-11,128,130,-59,-65,-74,-67,135,-58,137,-50,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,154,-65,-63,-56,-35,-51,-42,-7,164,-58,169,-66,173,177,181,182,183,-47,185,-37,-9,-26,-81,-82,-61,-22,190,-57,-38,-24,-30,-44,-28,-54,-46,196,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'DO':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,31,38,39,40,41,42,43,44,53,54,57,60,63,85,86,89,91,98,101,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,135,137,141,147,151,162,164,167,169,170,171,173,174,178,180,181,182,183,184,185,186,187,196,197,203,204,205,209,210,211,212,213,],[23,23,23,23,-13,-14,-15,-16,-17,-18,-19,-20,23,-12,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,23,-11,-59,-65,-74,-67,-50,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,-42,-7,-58,-66,-53,-47,-37,-9,-26,-81,-82,-61,-22,-57,-38,-24,-30,-44,-28,-54,-46,-21,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'WHILE':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,31,38,39,40,41,42,43,44,53,54,57,60,63,76,85,86,89,91,98,101,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,135,137,141,147,151,162,164,167,169,170,171,173,174,178,180,181,182,183,184,185,186,187,196,197,203,204,205,209,210,211,212,213,],[24,24,24,24,-13,-14,-15,-16,-17,-18,-19,-20,24,-12,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,24,-11,118,-59,-65,-74,-67,-50,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,-42,-7,-58,-66,-53,-47,-37,-9,-26,-81,-82,-61,-22,-57,-38,-24,-30,-44,-28,-54,-46,-21,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'FOR':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,31,38,39,40,41,42,43,44,53,54,57,60,63,85,86,89,91,98,101,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,135,137,141,147,151,162,164,167,169,170,171,173,174,178,180,181,182,183,184,185,186,187,196,197,203,204,205,209,210,211,212,213,],[25,25,25,25,-13,-14,-15,-16,-17,-18,-19,-20,25,-12,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,25,-11,-59,-65,-74,-67,-50,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,-42,-7,-58,-66,-53,-47,-37,-9,-26,-81,-82,-61,-22,-57,-38,-24,-30,-44,-28,-54,-46,-21,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'IF':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,31,38,39,40,41,42,43,44,53,54,57,60,63,85,86,89,91,98,101,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,135,137,141,147,151,162,164,167,169,170,171,173,174,178,180,181,182,183,184,185,186,187,195,196,197,203,204,205,209,210,211,212,213,],[26,26,26,26,-13,-14,-15,-16,-17,-18,-19,-20,26,-12,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,26,-11,-59,-65,-74,-67,-50,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,-42,-7,-58,-66,-53,-47,-37,-9,-26,-81,-82,-61,-22,-57,-38,-24,-30,-44,-28,-54,-46,-21,26,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'LEFT_BRACE':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,23,31,38,39,40,41,42,43,44,53,54,57,58,60,63,78,85,86,89,91,98,101,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,134,135,137,141,147,151,152,156,157,161,162,164,167,169,170,171,173,174,178,180,181,182,183,184,185,186,187,188,194,195,196,197,201,202,203,204,205,206,207,208,209,210,211,212,213,],[19,19,19,19,-13,-14,-15,-16,-17,-18,-19,-20,19,-12,19,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,100,19,-11,19,-59,-65,-74,-67,-50,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,19,-42,-7,-58,-66,-53,19,19,19,19,-47,-37,-9,-26,-81,-82,-61,-22,-57,-38,-24,-30,-44,-28,-54,-46,-21,19,19,19,-40,-31,19,19,-64,-8,-52,19,19,19,-75,-68,-45,-79,-77,]),'LOG':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,31,38,39,40,41,42,43,44,53,54,57,60,63,85,86,89,91,98,101,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,135,137,141,147,151,162,164,167,169,170,171,173,174,178,180,181,182,183,184,185,186,187,196,197,203,204,205,209,210,211,212,213,],[27,27,27,27,-13,-14,-15,-16,-17,-18,-19,-20,27,-12,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,27,-11,-59,-65,-74,-67,-50,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,-42,-7,-58,-66,-53,-47,-37,-9,-26,-81,-82,-61,-22,-57,-38,-24,-30,-44,-28,-54,-46,-21,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'LET':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,31,38,39,40,41,42,43,44,53,54,57,60,63,79,85,86,89,91,98,100,101,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,135,137,141,144,147,151,162,164,167,169,170,171,173,174,178,180,181,182,183,184,185,186,187,196,197,203,204,205,209,210,211,212,213,],[28,28,28,28,-13,-14,-15,-16,-17,-18,-19,-20,28,-12,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,28,-11,28,-59,-65,-74,-67,-50,28,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,-42,-7,-58,28,-66,-53,-47,-37,-9,-26,-81,-82,-61,-22,-57,-38,-24,-30,-44,-28,-54,-46,-21,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'MINUS':([0,3,4,5,7,8,9,10,11,12,13,14,16,17,19,20,21,22,24,25,31,38,39,40,41,42,43,44,50,52,53,54,56,57,60,62,63,77,78,79,80,81,82,85,86,89,90,91,92,93,96,98,101,105,106,107,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,128,129,130,131,132,135,136,137,139,141,147,150,151,152,153,154,155,156,159,160,162,163,164,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,189,190,191,193,194,196,197,198,199,203,204,205,209,210,211,212,213,],[30,30,30,30,-13,-14,-15,-16,-17,-18,-19,-20,-65,30,30,30,75,-12,30,30,-91,-60,-34,-69,-70,-71,-72,-73,30,30,-33,-49,75,-65,30,75,-11,30,75,30,75,30,30,-59,-65,-74,30,-67,75,-58,75,-50,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,30,75,-41,75,30,-65,30,75,30,-63,30,-56,-35,-51,-42,30,-7,30,-58,-66,30,75,-50,30,30,75,75,75,75,-47,75,-37,-9,-26,-81,-82,75,-61,-22,75,75,30,-57,30,-38,-24,-30,-44,-28,-54,-46,-21,30,30,75,-65,75,-40,-31,75,75,-64,-8,-52,-75,-68,-45,-79,-77,]),'NOT':([0,3,4,5,7,8,9,10,11,12,13,14,16,17,19,20,21,22,24,25,31,38,39,40,41,42,43,44,50,52,53,54,56,57,60,62,63,77,78,79,80,81,82,85,86,89,90,91,92,93,96,98,101,105,106,107,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,128,129,130,131,132,135,136,137,139,141,147,150,151,152,153,154,155,156,159,160,162,163,164,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,189,190,191,193,194,196,197,198,199,203,204,205,209,210,211,212,213,],[32,32,32,32,-13,-14,-15,-16,-17,-18,-19,-20,-65,32,32,32,64,-12,32,32,-91,-60,-34,-69,-70,-71,-72,-73,32,32,-33,-49,64,-65,32,64,-11,32,64,32,64,32,32,-59,-65,-74,32,-67,64,-58,64,-50,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,32,64,-41,64,32,-65,32,64,32,-63,32,-56,-35,-51,-42,32,-7,32,-58,-66,32,64,-50,32,32,64,64,64,64,-47,64,-37,-9,-26,-81,-82,64,-61,-22,64,64,32,-57,32,-38,-24,-30,-44,-28,-54,-46,-21,32,32,64,-65,64,-40,-31,64,64,-64,-8,-52,-75,-68,-45,-79,-77,]),'TYPE_BOOL':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,31,38,39,40,41,42,43,44,53,54,57,60,63,79,85,86,89,91,98,100,101,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,135,137,141,144,147,151,162,164,167,169,170,171,173,174,178,180,181,182,183,184,185,186,187,196,197,203,204,205,209,210,211,212,213,],[33,33,33,33,-13,-14,-15,-16,-17,-18,-19,-20,33,-12,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,33,-11,33,-59,-65,-74,-67,-50,33,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,-42,-7,-58,33,-66,-53,-47,-37,-9,-26,-81,-82,-61,-22,-57,-38,-24,-30,-44,-28,-54,-46,-21,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'TYPE_INT':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,31,38,39,40,41,42,43,44,53,54,57,60,63,79,85,86,89,91,98,100,101,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,135,137,141,144,147,151,162,164,167,169,170,171,173,174,178,180,181,182,183,184,185,186,187,196,197,203,204,205,209,210,211,212,213,],[34,34,34,34,-13,-14,-15,-16,-17,-18,-19,-20,34,-12,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,34,-11,34,-59,-65,-74,-67,-50,34,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,-42,-7,-58,34,-66,-53,-47,-37,-9,-26,-81,-82,-61,-22,-57,-38,-24,-30,-44,-28,-54,-46,-21,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'TYPE_CHAR':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,31,38,39,40,41,42,43,44,53,54,57,60,63,79,85,86,89,91,98,100,101,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,135,137,141,144,147,151,162,164,167,169,170,171,173,174,178,180,181,182,183,184,185,186,187,196,197,203,204,205,209,210,211,212,213,],[35,35,35,35,-13,-14,-15,-16,-17,-18,-19,-20,35,-12,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,35,-11,35,-59,-65,-74,-67,-50,35,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,-42,-7,-58,35,-66,-53,-47,-37,-9,-26,-81,-82,-61,-22,-57,-38,-24,-30,-44,-28,-54,-46,-21,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'TYPE_DOUBLE':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,31,38,39,40,41,42,43,44,53,54,57,60,63,79,85,86,89,91,98,100,101,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,135,137,141,144,147,151,162,164,167,169,170,171,173,174,178,180,181,182,183,184,185,186,187,196,197,203,204,205,209,210,211,212,213,],[36,36,36,36,-13,-14,-15,-16,-17,-18,-19,-20,36,-12,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,36,-11,36,-59,-65,-74,-67,-50,36,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,-42,-7,-58,36,-66,-53,-47,-37,-9,-26,-81,-82,-61,-22,-57,-38,-24,-30,-44,-28,-54,-46,-21,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'TYPE_STRING':([0,3,4,5,7,8,9,10,11,12,13,14,19,22,31,38,39,40,41,42,43,44,53,54,57,60,63,79,85,86,89,91,98,100,101,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,135,137,141,144,147,151,162,164,167,169,170,171,173,174,178,180,181,182,183,184,185,186,187,196,197,203,204,205,209,210,211,212,213,],[37,37,37,37,-13,-14,-15,-16,-17,-18,-19,-20,37,-12,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,37,-11,37,-59,-65,-74,-67,-50,37,-27,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,-42,-7,-58,37,-66,-53,-47,-37,-9,-26,-81,-82,-61,-22,-57,-38,-24,-30,-44,-28,-54,-46,-21,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'LEFT_PAREN':([0,3,4,5,7,8,9,10,11,12,13,14,16,17,19,20,22,24,25,26,27,30,31,32,38,39,40,41,42,43,44,48,50,52,53,54,57,60,63,65,66,67,68,69,70,71,72,73,74,75,77,79,81,82,85,86,87,88,89,90,91,98,101,104,105,106,107,109,111,112,113,114,115,116,117,118,120,122,124,127,128,129,130,131,132,135,136,137,139,141,147,148,149,150,151,153,154,162,164,167,169,170,171,173,174,177,178,179,180,181,182,183,184,185,186,187,189,190,196,197,203,204,205,209,210,211,212,213,],[17,17,17,17,-13,-14,-15,-16,-17,-18,-19,-20,52,17,17,17,-12,77,79,81,82,17,-91,17,-60,-34,-69,-70,-71,-72,-73,90,17,17,-33,-49,-65,17,-11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-59,-65,17,17,-74,17,-67,-50,-27,17,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,150,-41,17,17,17,-63,17,-56,-35,-51,-42,17,-7,17,-58,-66,17,17,17,-53,17,17,-47,-37,-9,-26,-81,-82,-61,-22,17,-57,17,-38,-24,-30,-44,-28,-54,-46,-21,17,17,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'DOUBLE':([0,3,4,5,7,8,9,10,11,12,13,14,17,19,20,22,24,25,30,31,32,38,39,40,41,42,43,44,50,52,53,54,57,60,63,65,66,67,68,69,70,71,72,73,74,75,77,79,81,82,85,86,87,88,89,90,91,98,101,104,105,106,107,109,111,112,113,114,115,116,117,118,120,122,124,127,128,129,130,131,132,135,136,137,139,141,147,148,149,150,151,153,154,162,164,167,169,170,171,173,174,177,178,179,180,181,182,183,184,185,186,187,189,190,196,197,203,204,205,209,210,211,212,213,],[40,40,40,40,-13,-14,-15,-16,-17,-18,-19,-20,40,40,40,-12,40,40,40,-91,40,-60,-34,-69,-70,-71,-72,-73,40,40,-33,-49,-65,40,-11,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-59,-65,40,40,-74,40,-67,-50,-27,40,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,40,-41,40,40,40,-63,40,-56,-35,-51,-42,40,-7,40,-58,-66,40,40,40,-53,40,40,-47,-37,-9,-26,-81,-82,-61,-22,40,-57,40,-38,-24,-30,-44,-28,-54,-46,-21,40,40,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'INTEGER':([0,3,4,5,7,8,9,10,11,12,13,14,17,19,20,22,24,25,30,31,32,38,39,40,41,42,43,44,50,52,53,54,57,60,63,65,66,67,68,69,70,71,72,73,74,75,77,79,81,82,85,86,87,88,89,90,91,98,101,104,105,106,107,109,111,112,113,114,115,116,117,118,120,122,124,127,128,129,130,131,132,135,136,137,139,141,147,148,149,150,151,153,154,162,164,167,169,170,171,173,174,177,178,179,180,181,182,183,184,185,186,187,189,190,196,197,203,204,205,209,210,211,212,213,],[41,41,41,41,-13,-14,-15,-16,-17,-18,-19,-20,41,41,41,-12,41,41,41,-91,41,-60,-34,-69,-70,-71,-72,-73,41,41,-33,-49,-65,41,-11,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-59,-65,41,41,-74,41,-67,-50,-27,41,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,41,-41,41,41,41,-63,41,-56,-35,-51,-42,41,-7,41,-58,-66,41,41,41,-53,41,41,-47,-37,-9,-26,-81,-82,-61,-22,41,-57,41,-38,-24,-30,-44,-28,-54,-46,-21,41,41,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'STRING':([0,3,4,5,7,8,9,10,11,12,13,14,17,19,20,22,24,25,30,31,32,38,39,40,41,42,43,44,50,52,53,54,57,60,63,65,66,67,68,69,70,71,72,73,74,75,77,79,81,82,85,86,87,88,89,90,91,98,101,104,105,106,107,109,111,112,113,114,115,116,117,118,120,122,124,127,128,129,130,131,132,135,136,137,139,141,147,148,149,150,151,153,154,162,164,167,169,170,171,173,174,177,178,179,180,181,182,183,184,185,186,187,189,190,196,197,203,204,205,209,210,211,212,213,],[42,42,42,42,-13,-14,-15,-16,-17,-18,-19,-20,42,42,42,-12,42,42,42,-91,42,-60,-34,-69,-70,-71,-72,-73,42,42,-33,-49,-65,42,-11,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-59,-65,42,42,-74,42,-67,-50,-27,42,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,42,-41,42,42,42,-63,42,-56,-35,-51,-42,42,-7,42,-58,-66,42,42,42,-53,42,42,-47,-37,-9,-26,-81,-82,-61,-22,42,-57,42,-38,-24,-30,-44,-28,-54,-46,-21,42,42,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'TRUE':([0,3,4,5,7,8,9,10,11,12,13,14,17,19,20,22,24,25,30,31,32,38,39,40,41,42,43,44,50,52,53,54,57,60,63,65,66,67,68,69,70,71,72,73,74,75,77,79,81,82,85,86,87,88,89,90,91,98,101,104,105,106,107,109,111,112,113,114,115,116,117,118,120,122,124,127,128,129,130,131,132,135,136,137,139,141,147,148,149,150,151,153,154,162,164,167,169,170,171,173,174,177,178,179,180,181,182,183,184,185,186,187,189,190,196,197,203,204,205,209,210,211,212,213,],[43,43,43,43,-13,-14,-15,-16,-17,-18,-19,-20,43,43,43,-12,43,43,43,-91,43,-60,-34,-69,-70,-71,-72,-73,43,43,-33,-49,-65,43,-11,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-59,-65,43,43,-74,43,-67,-50,-27,43,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,43,-41,43,43,43,-63,43,-56,-35,-51,-42,43,-7,43,-58,-66,43,43,43,-53,43,43,-47,-37,-9,-26,-81,-82,-61,-22,43,-57,43,-38,-24,-30,-44,-28,-54,-46,-21,43,43,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'FALSE':([0,3,4,5,7,8,9,10,11,12,13,14,17,19,20,22,24,25,30,31,32,38,39,40,41,42,43,44,50,52,53,54,57,60,63,65,66,67,68,69,70,71,72,73,74,75,77,79,81,82,85,86,87,88,89,90,91,98,101,104,105,106,107,109,111,112,113,114,115,116,117,118,120,122,124,127,128,129,130,131,132,135,136,137,139,141,147,148,149,150,151,153,154,162,164,167,169,170,171,173,174,177,178,179,180,181,182,183,184,185,186,187,189,190,196,197,203,204,205,209,210,211,212,213,],[44,44,44,44,-13,-14,-15,-16,-17,-18,-19,-20,44,44,44,-12,44,44,44,-91,44,-60,-34,-69,-70,-71,-72,-73,44,44,-33,-49,-65,44,-11,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-59,-65,44,44,-74,44,-67,-50,-27,44,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,44,-41,44,44,44,-63,44,-56,-35,-51,-42,44,-7,44,-58,-66,44,44,44,-53,44,44,-47,-37,-9,-26,-81,-82,-61,-22,44,-57,44,-38,-24,-30,-44,-28,-54,-46,-21,44,44,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'RIGHT_BRACE':([7,8,9,10,11,12,13,14,19,22,31,38,39,40,41,42,43,44,53,54,57,59,60,61,63,85,86,89,91,98,100,101,102,105,106,107,109,111,112,113,114,115,116,117,120,128,130,131,132,135,137,141,143,144,145,147,151,164,168,169,170,171,173,174,178,180,181,182,183,185,186,187,196,197,203,204,205,209,210,211,212,213,],[-13,-14,-15,-16,-17,-18,-19,-20,-25,-12,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,101,-25,-48,-11,-59,-65,-74,-67,-50,-25,-27,-23,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-41,-63,-56,-35,-51,-42,-7,-58,167,-25,-39,-66,-53,-37,-10,-26,-81,-82,-61,-22,-57,-38,-24,-30,-44,-54,-46,-21,-40,-31,-64,-8,-52,-75,-68,-45,-79,-77,]),'ASSIGN':([16,64,83,84,93,193,],[50,104,127,129,136,50,]),'DOT':([16,57,86,123,193,],[51,99,99,99,51,]),'INCREMENT':([16,57,123,193,],[53,53,53,53,]),'DECREMENT':([16,57,123,193,],[54,54,54,54,]),'LEFT_BRACKET':([16,57,86,123,193,],[55,55,55,55,55,]),'PRODUCT':([16,31,38,39,40,41,42,43,44,57,85,86,89,93,98,105,106,107,109,111,112,113,114,115,116,117,123,131,132,141,147,152,170,171,186,187,193,],[-65,87,-60,-34,-69,-70,-71,-72,-73,-65,87,-65,87,-58,-50,87,87,87,87,87,87,87,87,87,87,87,-65,-35,-51,-58,87,-50,87,87,-46,-50,-65,]),'DIVIDE':([16,31,38,39,40,41,42,43,44,57,85,86,89,93,98,105,106,107,109,111,112,113,114,115,116,117,123,131,132,141,147,152,170,171,186,187,193,],[-65,88,-60,-34,-69,-70,-71,-72,-73,-65,88,-65,88,-58,-50,88,88,88,88,88,88,88,88,88,88,88,-65,-35,-51,-58,88,-50,88,88,-46,-50,-65,]),'EXP':([16,21,31,38,39,40,41,42,43,44,53,54,56,57,62,78,80,85,86,89,92,93,96,98,105,106,107,109,111,112,113,114,115,116,117,119,121,123,125,131,132,141,147,151,152,155,156,159,160,163,170,171,172,175,176,186,187,191,193,194,198,199,],[-65,65,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,65,-65,65,65,65,-59,-65,-74,65,-58,65,-50,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,65,65,-65,65,-35,-51,-58,-66,65,-50,65,65,65,65,65,-81,-82,65,65,65,-46,-50,65,-65,65,65,65,]),'GTE':([16,21,31,38,39,40,41,42,43,44,53,54,56,57,62,78,80,85,86,89,92,93,96,98,105,106,107,109,111,112,113,114,115,116,117,119,121,123,125,131,132,141,147,151,152,155,156,159,160,163,170,171,172,175,176,186,187,191,193,194,198,199,],[-65,66,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,66,-65,66,66,66,-59,-65,-74,66,-58,66,-50,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,66,66,-65,66,-35,-51,-58,-66,66,-50,66,66,66,66,66,-81,-82,66,66,66,-46,-50,66,-65,66,66,66,]),'LTE':([16,21,31,38,39,40,41,42,43,44,53,54,56,57,62,78,80,85,86,89,92,93,96,98,105,106,107,109,111,112,113,114,115,116,117,119,121,123,125,131,132,141,147,151,152,155,156,159,160,163,170,171,172,175,176,186,187,191,193,194,198,199,],[-65,67,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,67,-65,67,67,67,-59,-65,-74,67,-58,67,-50,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,67,67,-65,67,-35,-51,-58,-66,67,-50,67,67,67,67,67,-81,-82,67,67,67,-46,-50,67,-65,67,67,67,]),'IS':([16,21,31,38,39,40,41,42,43,44,53,54,56,57,62,78,80,85,86,89,92,93,96,98,105,106,107,109,111,112,113,114,115,116,117,119,121,123,125,131,132,141,147,151,152,155,156,159,160,163,170,171,172,175,176,186,187,191,193,194,198,199,],[-65,68,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,68,-65,68,68,68,-59,-65,-74,68,-58,68,-50,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,68,68,-65,68,-35,-51,-58,-66,68,-50,68,68,68,68,68,-81,-82,68,68,68,-46,-50,68,-65,68,68,68,]),'GT':([16,21,31,38,39,40,41,42,43,44,53,54,56,57,62,78,80,85,86,89,92,93,96,98,105,106,107,109,111,112,113,114,115,116,117,119,121,123,125,131,132,141,147,151,152,155,156,159,160,163,170,171,172,175,176,186,187,191,193,194,198,199,],[-65,69,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,69,-65,69,69,69,-59,-65,-74,69,-58,69,-50,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,69,69,-65,69,-35,-51,-58,-66,69,-50,69,69,69,69,69,-81,-82,69,69,69,-46,-50,69,-65,69,69,69,]),'LT':([16,21,31,38,39,40,41,42,43,44,53,54,56,57,62,78,80,85,86,89,92,93,96,98,105,106,107,109,111,112,113,114,115,116,117,119,121,123,125,131,132,141,147,151,152,155,156,159,160,163,170,171,172,175,176,186,187,191,193,194,198,199,],[-65,70,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,70,-65,70,70,70,-59,-65,-74,70,-58,70,-50,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,70,70,-65,70,-35,-51,-58,-66,70,-50,70,70,70,70,70,-81,-82,70,70,70,-46,-50,70,-65,70,70,70,]),'EQUALS':([16,21,31,38,39,40,41,42,43,44,53,54,56,57,62,78,80,85,86,89,92,93,96,98,105,106,107,109,111,112,113,114,115,116,117,119,121,123,125,131,132,141,147,151,152,155,156,159,160,163,170,171,172,175,176,186,187,191,193,194,198,199,],[-65,71,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,71,-65,71,71,71,-59,-65,-74,71,-58,71,-50,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,71,71,-65,71,-35,-51,-58,-66,71,-50,71,71,71,71,71,-81,-82,71,71,71,-46,-50,71,-65,71,71,71,]),'OR':([16,21,31,38,39,40,41,42,43,44,53,54,56,57,62,78,80,85,86,89,92,93,96,98,105,106,107,109,111,112,113,114,115,116,117,119,121,123,125,131,132,141,147,151,152,155,156,159,160,163,170,171,172,175,176,186,187,191,193,194,198,199,],[-65,72,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,72,-65,72,72,72,-59,-65,-74,72,-58,72,-50,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,72,72,-65,72,-35,-51,-58,-66,72,-50,72,72,72,72,72,-81,-82,72,72,72,-46,-50,72,-65,72,72,72,]),'AND':([16,21,31,38,39,40,41,42,43,44,53,54,56,57,62,78,80,85,86,89,92,93,96,98,105,106,107,109,111,112,113,114,115,116,117,119,121,123,125,131,132,141,147,151,152,155,156,159,160,163,170,171,172,175,176,186,187,191,193,194,198,199,],[-65,73,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,73,-65,73,73,73,-59,-65,-74,73,-58,73,-50,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,73,73,-65,73,-35,-51,-58,-66,73,-50,73,73,73,73,73,-81,-82,73,73,73,-46,-50,73,-65,73,73,73,]),'PLUS':([16,21,31,38,39,40,41,42,43,44,53,54,56,57,62,78,80,85,86,89,92,93,96,98,105,106,107,109,111,112,113,114,115,116,117,119,121,123,125,131,132,141,147,151,152,155,156,159,160,163,170,171,172,175,176,186,187,191,193,194,198,199,],[-65,74,-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,74,-65,74,74,74,-59,-65,-74,74,-58,74,-50,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,74,74,-65,74,-35,-51,-58,-66,74,-50,74,74,74,74,74,-81,-82,74,74,74,-46,-50,74,-65,74,74,74,]),'RIGHT_PAREN':([31,38,39,40,41,42,43,44,52,53,54,56,57,85,86,89,90,93,95,96,98,105,106,107,109,111,112,113,114,115,116,117,119,121,123,125,126,131,132,133,135,141,147,165,169,170,171,172,175,185,186,191,192,193,198,199,200,],[-91,-60,-34,-69,-70,-71,-72,-73,94,-33,-49,98,-65,-59,-65,-74,134,-58,138,-36,-50,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,152,98,-65,157,158,-35,-51,161,-42,-58,-66,-6,-26,-81,-82,187,188,-54,-46,201,202,-65,206,207,208,]),'IN':([31,38,39,40,41,42,43,44,53,54,57,62,85,86,89,98,105,106,107,109,111,112,113,114,115,116,117,131,132,141,147,170,171,186,],[-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,103,-59,-65,-74,-50,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-35,-51,-58,-66,-81,-82,-46,]),'TO':([31,38,39,40,41,42,43,44,53,54,57,80,85,86,89,98,105,106,107,109,111,112,113,114,115,116,117,121,123,131,132,141,147,170,171,186,],[-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,124,-59,-65,-74,-50,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,153,-65,-35,-51,-58,-66,-81,-82,-46,]),'COMMA':([31,38,39,40,41,42,43,44,53,54,57,85,86,89,96,98,105,106,107,109,111,112,113,114,115,116,117,131,132,141,147,170,171,186,],[-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,-59,-65,-74,139,-50,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-35,-51,-58,-66,-81,-82,-46,]),'STEP':([31,38,39,40,41,42,43,44,53,54,57,85,86,89,98,105,106,107,109,111,112,113,114,115,116,117,131,132,141,147,156,170,171,175,186,],[-91,-60,-34,-69,-70,-71,-72,-73,-33,-49,-65,-59,-65,-74,-50,-76,-78,-80,-85,-83,-84,-86,-87,-88,-89,-90,-35,-51,-58,-66,179,-81,-82,189,-46,]),'QUOTE':([55,140,],[97,166,]),'GREATER':([68,],[108,]),'LESS':([68,],[110,]),'ELSE':([101,180,],[-27,195,]),'THAN':([108,110,],[148,149,]),'RIGHT_BRACKET':([166,],[186,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,3,4,5,],[2,45,46,47,]),'statement':([0,3,4,5,19,60,],[3,3,3,3,60,60,]),'function_declaration':([0,3,4,5,],[4,4,4,4,]),'struct_declaration':([0,3,4,5,],[5,5,5,5,]),'empty':([0,3,4,5,19,60,100,144,],[6,6,6,6,61,61,145,145,]),'assignment_statement':([0,3,4,5,19,60,177,190,],[7,7,7,7,7,7,192,200,]),'expression_statement':([0,3,4,5,19,60,],[8,8,8,8,8,8,]),'iterative_statement':([0,3,4,5,19,60,],[9,9,9,9,9,9,]),'conditional_statement':([0,3,4,5,19,60,195,],[10,10,10,10,10,10,205,]),'compound_statement':([0,3,4,5,19,23,60,78,134,152,156,157,161,188,194,195,201,202,206,207,208,],[11,11,11,11,11,76,11,120,162,174,178,180,184,197,203,204,209,210,211,212,213,]),'print_statement':([0,3,4,5,19,60,],[12,12,12,12,12,12,]),'function_call':([0,3,4,5,19,60,],[13,13,13,13,13,13,]),'variable_declaration':([0,3,4,5,19,60,79,100,144,],[14,14,14,14,14,14,122,144,144,]),'expression':([0,3,4,5,17,19,20,24,25,50,52,60,77,79,81,82,90,118,122,124,127,129,136,139,150,153,154,177,179,189,190,],[21,21,21,21,56,21,62,78,80,92,96,21,119,121,125,96,96,151,155,156,159,160,163,96,172,175,176,191,194,198,199,]),'type_specifier':([0,3,4,5,19,60,79,100,144,],[29,29,29,29,29,29,29,29,29,]),'term':([0,3,4,5,17,19,20,24,25,30,32,50,52,60,65,66,67,68,69,70,71,72,73,74,75,77,79,81,82,90,104,118,122,124,127,129,136,139,148,149,150,153,154,177,179,189,190,],[31,31,31,31,31,31,31,31,31,85,89,31,31,31,105,106,107,109,111,112,113,114,115,116,117,31,31,31,31,31,147,31,31,31,31,31,31,31,170,171,31,31,31,31,31,31,31,]),'factor':([0,3,4,5,17,19,20,24,25,30,32,50,52,60,65,66,67,68,69,70,71,72,73,74,75,77,79,81,82,87,88,90,104,118,122,124,127,129,136,139,148,149,150,153,154,177,179,189,190,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,131,132,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'literal':([0,3,4,5,17,19,20,24,25,30,32,50,52,60,65,66,67,68,69,70,71,72,73,74,75,77,79,81,82,87,88,90,104,118,122,124,127,129,136,139,148,149,150,153,154,177,179,189,190,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'statement_list':([19,60,],[59,102,]),'arguments':([52,82,90,139,],[95,126,133,165,]),'variable_declaration_list':([100,144,],[143,168,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('type_specifier -> TYPE_BOOL','type_specifier',1,'p_type_specifier','Type.py',3),
  ('type_specifier -> TYPE_INT','type_specifier',1,'p_type_specifier','Type.py',4),
  ('type_specifier -> TYPE_CHAR','type_specifier',1,'p_type_specifier','Type.py',5),
  ('type_specifier -> TYPE_DOUBLE','type_specifier',1,'p_type_specifier','Type.py',6),
  ('type_specifier -> TYPE_STRING','type_specifier',1,'p_type_specifier','Type.py',7),
  ('arguments -> expression COMMA arguments','arguments',3,'p_arguments','Arguments.py',4),
  ('function_call -> IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON','function_call',4,'p_function_call_empty','Call.py',4),
  ('conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE compound_statement','conditional_statement',7,'p_if_01','If.py',4),
  ('struct_declaration -> STRUCT IDENTIFIER LEFT_BRACE variable_declaration_list RIGHT_BRACE','struct_declaration',5,'p_struct_01','Struct.py',4),
  ('variable_declaration_list -> variable_declaration variable_declaration_list','variable_declaration_list',2,'p_var_declaration_list_01','VariableList.py',4),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_statement_expression','Expression.py',4),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_statement_expression','Expression.py',5),
  ('statement -> assignment_statement','statement',1,'p_statement','Generic.py',5),
  ('statement -> expression_statement','statement',1,'p_statement','Generic.py',6),
  ('statement -> iterative_statement','statement',1,'p_statement','Generic.py',7),
  ('statement -> conditional_statement','statement',1,'p_statement','Generic.py',8),
  ('statement -> compound_statement','statement',1,'p_statement','Generic.py',9),
  ('statement -> print_statement','statement',1,'p_statement','Generic.py',10),
  ('statement -> function_call','statement',1,'p_statement','Generic.py',11),
  ('statement -> variable_declaration','statement',1,'p_statement','Generic.py',12),
  ('iterative_statement -> DO compound_statement WHILE LEFT_PAREN expression RIGHT_PAREN','iterative_statement',6,'p_do_while_01','DoWhile.py',4),
  ('iterative_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN compound_statement','iterative_statement',5,'p_while_strict','While.py',4),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','List.py',5),
  ('print_statement -> LOG LEFT_PAREN arguments RIGHT_PAREN SEMICOLON','print_statement',5,'p_statement_log','Print.py',4),
  ('empty -> <empty>','empty',0,'p_empty','Empty.py',5),
  ('assignment_statement -> PUT expression IN IDENTIFIER SEMICOLON','assignment_statement',5,'p_rule_01','Assignment.py',5),
  ('compound_statement -> LEFT_BRACE statement_list RIGHT_BRACE','compound_statement',3,'p_compound_statement','Compound.py',5),
  ('function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN compound_statement','function_declaration',6,'p_function_statement','Function.py',5),
  ('declaration_list -> statement declaration_list','declaration_list',2,'p_declaration_list_01','List.py',5),
  ('variable_declaration -> LET IDENTIFIER ASSIGN expression SEMICOLON','variable_declaration',5,'p_declaration_01','Variable.py',5),
  ('iterative_statement -> FOR LEFT_PAREN expression TO expression RIGHT_PAREN compound_statement','iterative_statement',7,'p_for_01','For.py',5),
  ('program -> declaration_list','program',1,'p_program_01','Program.py',6),
  ('expression -> IDENTIFIER INCREMENT','expression',2,'p_expression_inc','Expression.py',7),
  ('factor -> literal','factor',1,'p_factor','Factor.py',7),
  ('term -> term PRODUCT factor','term',3,'p_term_factor_product','Term.py',7),
  ('arguments -> expression','arguments',1,'p_arguments_single','Arguments.py',8),
  ('function_call -> IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN SEMICOLON','function_call',5,'p_function_call','Call.py',8),
  ('conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement','conditional_statement',5,'p_if_02','If.py',8),
  ('variable_declaration_list -> empty','variable_declaration_list',1,'p_var_declaration_list_02','VariableList.py',8),
  ('iterative_statement -> DO compound_statement WHILE LEFT_PAREN expression RIGHT_PAREN SEMICOLON','iterative_statement',7,'p_do_while_02','DoWhile.py',8),
  ('iterative_statement -> WHILE expression compound_statement','iterative_statement',3,'p_while','While.py',8),
  ('assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',4,'p_rule_02','Assignment.py',9),
  ('declaration_list -> function_declaration declaration_list','declaration_list',2,'p_declaration_list_02','List.py',9),
  ('variable_declaration -> type_specifier IDENTIFIER ASSIGN expression SEMICOLON','variable_declaration',5,'p_declaration_02','Variable.py',9),
  ('iterative_statement -> FOR LEFT_PAREN expression TO expression STEP expression RIGHT_PAREN compound_statement','iterative_statement',9,'p_for_02','For.py',9),
  ('literal -> IDENTIFIER LEFT_BRACKET QUOTE IDENTIFIER QUOTE RIGHT_BRACKET','literal',6,'p_literal_struct_01','Literal.py',10),
  ('function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN RIGHT_PAREN compound_statement','function_declaration',5,'p_function_statement_empty','Function.py',10),
  ('statement_list -> empty','statement_list',1,'p_statement_list_empty','List.py',10),
  ('expression -> IDENTIFIER DECREMENT','expression',2,'p_expression_dec','Expression.py',11),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor_expression','Factor.py',11),
  ('term -> term DIVIDE factor','term',3,'p_term_factor_divide','Term.py',11),
  ('conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE conditional_statement','conditional_statement',7,'p_if_03','If.py',12),
  ('iterative_statement -> DO compound_statement WHILE expression','iterative_statement',4,'p_do_while_03','DoWhile.py',12),
  ('assignment_statement -> IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',6,'p_rule_03','Assignment.py',13),
  ('declaration_list -> struct_declaration declaration_list','declaration_list',2,'p_declaration_list_03','List.py',13),
  ('variable_declaration -> type_specifier IDENTIFIER SEMICOLON','variable_declaration',3,'p_declaration_03','Variable.py',13),
  ('iterative_statement -> FOR expression TO expression compound_statement','iterative_statement',5,'p_for_03','For.py',13),
  ('literal -> IDENTIFIER DOT IDENTIFIER','literal',3,'p_literal_struct_02','Literal.py',14),
  ('expression -> MINUS term','expression',2,'p_expression_negative','Expression.py',15),
  ('term -> factor','term',1,'p_term_factor','Term.py',15),
  ('iterative_statement -> DO compound_statement WHILE expression SEMICOLON','iterative_statement',5,'p_do_while_04','DoWhile.py',16),
  ('declaration_list -> empty','declaration_list',1,'p_declaration_list_04','List.py',17),
  ('variable_declaration -> LET IDENTIFIER SEMICOLON','variable_declaration',3,'p_declaration_04','Variable.py',17),
  ('iterative_statement -> FOR expression TO expression STEP expression compound_statement','iterative_statement',7,'p_for_04','For.py',17),
  ('literal -> IDENTIFIER','literal',1,'p_literal_identifier','Literal.py',18),
  ('expression -> expression NOT ASSIGN term','expression',4,'p_expression_not_eq','Expression.py',19),
  ('variable_declaration -> IDENTIFIER IDENTIFIER SEMICOLON','variable_declaration',3,'p_declaration_05','Variable.py',21),
  ('iterative_statement -> FOR LEFT_PAREN variable_declaration expression SEMICOLON assignment_statement RIGHT_PAREN compound_statement','iterative_statement',8,'p_for_05','For.py',21),
  ('literal -> DOUBLE','literal',1,'p_literal','Literal.py',24),
  ('literal -> INTEGER','literal',1,'p_literal','Literal.py',25),
  ('literal -> STRING','literal',1,'p_literal','Literal.py',26),
  ('literal -> TRUE','literal',1,'p_literal','Literal.py',27),
  ('literal -> FALSE','literal',1,'p_literal','Literal.py',28),
  ('expression -> NOT term','expression',2,'p_expression_not','Expression.py',23),
  ('iterative_statement -> FOR LEFT_PAREN variable_declaration expression SEMICOLON expression RIGHT_PAREN compound_statement','iterative_statement',8,'p_for_06','For.py',25),
  ('expression -> expression EXP term','expression',3,'p_expression_exp','Expression.py',27),
  ('iterative_statement -> FOR LEFT_PAREN expression SEMICOLON expression SEMICOLON assignment_statement RIGHT_PAREN compound_statement','iterative_statement',9,'p_for_07','For.py',29),
  ('expression -> expression GTE term','expression',3,'p_expression_gte','Expression.py',31),
  ('iterative_statement -> FOR LEFT_PAREN expression SEMICOLON expression SEMICOLON expression RIGHT_PAREN compound_statement','iterative_statement',9,'p_for_08','For.py',33),
  ('expression -> expression LTE term','expression',3,'p_expression_lte','Expression.py',35),
  ('expression -> expression IS GREATER THAN term','expression',5,'p_expression_gt_descriptive','Expression.py',39),
  ('expression -> expression IS LESS THAN term','expression',5,'p_expression_lt_descriptive','Expression.py',43),
  ('expression -> expression GT term','expression',3,'p_expression_gt','Expression.py',47),
  ('expression -> expression LT term','expression',3,'p_expression_lt','Expression.py',51),
  ('expression -> expression IS term','expression',3,'p_expression_equal_is','Expression.py',55),
  ('expression -> expression EQUALS term','expression',3,'p_expression_equal','Expression.py',59),
  ('expression -> expression OR term','expression',3,'p_expression_or','Expression.py',63),
  ('expression -> expression AND term','expression',3,'p_expression_and','Expression.py',67),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','Expression.py',71),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','Expression.py',75),
  ('expression -> term','expression',1,'p_expression_term','Expression.py',80),
]
