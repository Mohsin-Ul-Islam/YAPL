
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftPLUSMINUSleftPRODUCTDIVIDEleftANDORrightNOTAND ASSIGN BREAK COMMA DIVIDE DO DOUBLE ELSE EQUALS FOR FUNCTION GREATER GT GTE IDENTIFIER IF IN INTEGER IS LEFT_BRACE LEFT_PAREN LESS LET LOG LT LTE MINUS MODULUS NOT OBJECT OR PLUS PRODUCT PUT RETURN RIGHT_BRACE RIGHT_PAREN SEMICOLON SKIP STEP STRING STRUCT THAN TO TYPE_BOOL TYPE_CHAR TYPE_DOUBLE TYPE_INT TYPE_STRING WHILEarguments   : expression COMMA argumentsfunction_call : IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLONassignment_statement : PUT expression IN IDENTIFIER SEMICOLONcompound_statement : LEFT_BRACE statement_list RIGHT_BRACEconditional_statement : IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE compound_statementexpression_statement : expression SEMICOLON\n       expression_statement : SEMICOLON\n    \n        statement : assignment_statement\n                  | expression_statement\n                  | iterative_statement\n                  | conditional_statement\n                  | compound_statement\n                  | print_statement\n                  | function_statement\n                  | function_call\n    iterative_statement : DO compound_statement WHILE LEFT_PAREN expression RIGHT_PARENiterative_statement : FOR LEFT_PAREN expression TO expression RIGHT_PAREN compound_statementiterative_statement : WHILE LEFT_PAREN expression RIGHT_PAREN compound_statement\n        statement_list : statement statement_list\n                       |\n    print_statement : LOG LEFT_PAREN arguments RIGHT_PAREN SEMICOLONfunction_statement : FUNCTION IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN compound_statementprogram : statement_listexpression : MINUS termfactor : literalterm : term PRODUCT factorarguments : expressionfunction_call : IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN SEMICOLONassignment_statement : IDENTIFIER ASSIGN expression SEMICOLONconditional_statement : IF LEFT_PAREN expression RIGHT_PAREN compound_statementiterative_statement : FOR LEFT_PAREN expression TO expression STEP expression RIGHT_PAREN compound_statementliteral : IDENTIFIERfunction_statement : FUNCTION IDENTIFIER LEFT_PAREN RIGHT_PAREN compound_statementexpression : NOT termfactor : LEFT_PAREN expression RIGHT_PARENterm : term DIVIDE factorassignment_statement : LET IDENTIFIER ASSIGN expression SEMICOLON\n\n    literal : DOUBLE\n            | INTEGER\n            | STRING\n\n    expression : expression GTE termterm : factorexpression : expression LTE termexpression : expression IS GREATER THAN termexpression : expression IS LESS THAN termexpression : expression GT termexpression : expression LT termexpression : expression IS termexpression : expression EQUALS termexpression : expression OR termexpression : expression AND termexpression : expression PLUS termexpression : expression MINUS termexpression : term'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,15,33,36,85,93,94,105,108,110,112,114,115,117,118,122,123,125,127,],[-20,0,-23,-20,-8,-9,-10,-11,-12,-13,-14,-15,-7,-19,-6,-4,-29,-2,-3,-28,-37,-18,-30,-21,-33,-16,-22,-17,-5,-31,]),'PUT':([0,3,4,5,6,7,8,9,10,11,15,22,36,85,93,94,105,108,110,112,114,115,117,118,122,123,125,127,],[12,12,-8,-9,-10,-11,-12,-13,-14,-15,-7,12,-6,-4,-29,-2,-3,-28,-37,-18,-30,-21,-33,-16,-22,-17,-5,-31,]),'IDENTIFIER':([0,3,4,5,6,7,8,9,10,11,12,15,16,19,22,24,25,27,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,59,60,62,79,85,87,91,92,93,94,96,98,100,105,108,110,112,114,115,117,118,120,122,123,125,127,],[14,14,-8,-9,-10,-11,-12,-13,-14,-15,35,-7,49,35,14,57,35,35,-6,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,90,35,-4,35,35,35,-29,-2,35,35,35,-3,-28,-37,-18,-30,-21,-33,-16,35,-22,-17,-5,-31,]),'LET':([0,3,4,5,6,7,8,9,10,11,15,22,36,85,93,94,105,108,110,112,114,115,117,118,122,123,125,127,],[16,16,-8,-9,-10,-11,-12,-13,-14,-15,-7,16,-6,-4,-29,-2,-3,-28,-37,-18,-30,-21,-33,-16,-22,-17,-5,-31,]),'SEMICOLON':([0,3,4,5,6,7,8,9,10,11,13,14,15,22,26,28,29,30,31,32,35,36,58,61,63,64,66,68,69,70,71,72,73,74,75,76,82,85,88,89,90,93,94,95,97,102,105,106,107,108,110,112,114,115,117,118,122,123,125,127,],[15,15,-8,-9,-10,-11,-12,-13,-14,-15,36,-32,-7,15,-54,-42,-25,-38,-39,-40,-32,-6,-24,-34,-41,-43,-48,-46,-47,-49,-50,-51,-52,-53,93,94,-35,-4,-26,-36,105,-29,-2,108,110,115,-3,-44,-45,-28,-37,-18,-30,-21,-33,-16,-22,-17,-5,-31,]),'DO':([0,3,4,5,6,7,8,9,10,11,15,22,36,85,93,94,105,108,110,112,114,115,117,118,122,123,125,127,],[17,17,-8,-9,-10,-11,-12,-13,-14,-15,-7,17,-6,-4,-29,-2,-3,-28,-37,-18,-30,-21,-33,-16,-22,-17,-5,-31,]),'FOR':([0,3,4,5,6,7,8,9,10,11,15,22,36,85,93,94,105,108,110,112,114,115,117,118,122,123,125,127,],[20,20,-8,-9,-10,-11,-12,-13,-14,-15,-7,20,-6,-4,-29,-2,-3,-28,-37,-18,-30,-21,-33,-16,-22,-17,-5,-31,]),'WHILE':([0,3,4,5,6,7,8,9,10,11,15,22,36,50,85,93,94,105,108,110,112,114,115,117,118,122,123,125,127,],[18,18,-8,-9,-10,-11,-12,-13,-14,-15,-7,18,-6,80,-4,-29,-2,-3,-28,-37,-18,-30,-21,-33,-16,-22,-17,-5,-31,]),'IF':([0,3,4,5,6,7,8,9,10,11,15,22,36,85,93,94,105,108,110,112,114,115,117,118,122,123,125,127,],[21,21,-8,-9,-10,-11,-12,-13,-14,-15,-7,21,-6,-4,-29,-2,-3,-28,-37,-18,-30,-21,-33,-16,-22,-17,-5,-31,]),'LEFT_BRACE':([0,3,4,5,6,7,8,9,10,11,15,17,22,36,85,93,94,99,101,104,105,108,110,112,114,115,116,117,118,119,121,122,123,125,126,127,],[22,22,-8,-9,-10,-11,-12,-13,-14,-15,-7,22,22,-6,-4,-29,-2,22,22,22,-3,-28,-37,-18,-30,-21,22,-33,-16,22,22,-22,-17,-5,22,-31,]),'LOG':([0,3,4,5,6,7,8,9,10,11,15,22,36,85,93,94,105,108,110,112,114,115,117,118,122,123,125,127,],[23,23,-8,-9,-10,-11,-12,-13,-14,-15,-7,23,-6,-4,-29,-2,-3,-28,-37,-18,-30,-21,-33,-16,-22,-17,-5,-31,]),'FUNCTION':([0,3,4,5,6,7,8,9,10,11,15,22,36,85,93,94,105,108,110,112,114,115,117,118,122,123,125,127,],[24,24,-8,-9,-10,-11,-12,-13,-14,-15,-7,24,-6,-4,-29,-2,-3,-28,-37,-18,-30,-21,-33,-16,-22,-17,-5,-31,]),'MINUS':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,19,22,26,28,29,30,31,32,34,35,36,47,48,51,52,53,54,56,58,61,63,64,66,68,69,70,71,72,73,74,75,78,79,81,82,83,84,85,87,88,89,93,94,96,97,98,100,105,106,107,108,110,111,112,113,114,115,117,118,120,122,123,124,125,127,],[25,25,-8,-9,-10,-11,-12,-13,-14,-15,25,46,-32,-7,25,25,-54,-42,-25,-38,-39,-40,46,-32,-6,25,25,25,46,25,25,25,-24,-34,-41,-43,-48,-46,-47,-49,-50,-51,-52,-53,46,46,25,46,-35,46,46,-4,25,-26,-36,-29,-2,25,46,25,25,-3,-44,-45,-28,-37,46,-18,46,-30,-21,-33,-16,25,-22,-17,46,-5,-31,]),'NOT':([0,3,4,5,6,7,8,9,10,11,12,15,19,22,36,47,48,51,53,54,56,79,85,87,93,94,96,98,100,105,108,110,112,114,115,117,118,120,122,123,125,127,],[27,27,-8,-9,-10,-11,-12,-13,-14,-15,27,-7,27,27,-6,27,27,27,27,27,27,27,-4,27,-29,-2,27,27,27,-3,-28,-37,-18,-30,-21,-33,-16,27,-22,-17,-5,-31,]),'LEFT_PAREN':([0,3,4,5,6,7,8,9,10,11,12,14,15,18,19,20,21,22,23,25,27,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,57,59,60,79,80,85,87,91,92,93,94,96,98,100,105,108,110,112,114,115,117,118,120,122,123,125,127,],[19,19,-8,-9,-10,-11,-12,-13,-14,-15,19,48,-7,51,19,53,54,19,56,19,19,-6,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,87,19,19,19,98,-4,19,19,19,-29,-2,19,19,19,-3,-28,-37,-18,-30,-21,-33,-16,19,-22,-17,-5,-31,]),'DOUBLE':([0,3,4,5,6,7,8,9,10,11,12,15,19,22,25,27,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,59,60,79,85,87,91,92,93,94,96,98,100,105,108,110,112,114,115,117,118,120,122,123,125,127,],[30,30,-8,-9,-10,-11,-12,-13,-14,-15,30,-7,30,30,30,30,-6,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-4,30,30,30,-29,-2,30,30,30,-3,-28,-37,-18,-30,-21,-33,-16,30,-22,-17,-5,-31,]),'INTEGER':([0,3,4,5,6,7,8,9,10,11,12,15,19,22,25,27,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,59,60,79,85,87,91,92,93,94,96,98,100,105,108,110,112,114,115,117,118,120,122,123,125,127,],[31,31,-8,-9,-10,-11,-12,-13,-14,-15,31,-7,31,31,31,31,-6,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-4,31,31,31,-29,-2,31,31,31,-3,-28,-37,-18,-30,-21,-33,-16,31,-22,-17,-5,-31,]),'STRING':([0,3,4,5,6,7,8,9,10,11,12,15,19,22,25,27,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,59,60,79,85,87,91,92,93,94,96,98,100,105,108,110,112,114,115,117,118,120,122,123,125,127,],[32,32,-8,-9,-10,-11,-12,-13,-14,-15,32,-7,32,32,32,32,-6,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-4,32,32,32,-29,-2,32,32,32,-3,-28,-37,-18,-30,-21,-33,-16,32,-22,-17,-5,-31,]),'RIGHT_BRACE':([3,4,5,6,7,8,9,10,11,15,22,33,36,55,85,93,94,105,108,110,112,114,115,117,118,122,123,125,127,],[-20,-8,-9,-10,-11,-12,-13,-14,-15,-7,-20,-19,-6,85,-4,-29,-2,-3,-28,-37,-18,-30,-21,-33,-16,-22,-17,-5,-31,]),'GTE':([13,14,26,28,29,30,31,32,34,35,52,58,61,63,64,66,68,69,70,71,72,73,74,75,78,81,82,83,84,88,89,97,106,107,111,113,124,],[37,-32,-54,-42,-25,-38,-39,-40,37,-32,37,-24,-34,-41,-43,-48,-46,-47,-49,-50,-51,-52,-53,37,37,37,-35,37,37,-26,-36,37,-44,-45,37,37,37,]),'LTE':([13,14,26,28,29,30,31,32,34,35,52,58,61,63,64,66,68,69,70,71,72,73,74,75,78,81,82,83,84,88,89,97,106,107,111,113,124,],[38,-32,-54,-42,-25,-38,-39,-40,38,-32,38,-24,-34,-41,-43,-48,-46,-47,-49,-50,-51,-52,-53,38,38,38,-35,38,38,-26,-36,38,-44,-45,38,38,38,]),'IS':([13,14,26,28,29,30,31,32,34,35,52,58,61,63,64,66,68,69,70,71,72,73,74,75,78,81,82,83,84,88,89,97,106,107,111,113,124,],[39,-32,-54,-42,-25,-38,-39,-40,39,-32,39,-24,-34,-41,-43,-48,-46,-47,-49,-50,-51,-52,-53,39,39,39,-35,39,39,-26,-36,39,-44,-45,39,39,39,]),'GT':([13,14,26,28,29,30,31,32,34,35,52,58,61,63,64,66,68,69,70,71,72,73,74,75,78,81,82,83,84,88,89,97,106,107,111,113,124,],[40,-32,-54,-42,-25,-38,-39,-40,40,-32,40,-24,-34,-41,-43,-48,-46,-47,-49,-50,-51,-52,-53,40,40,40,-35,40,40,-26,-36,40,-44,-45,40,40,40,]),'LT':([13,14,26,28,29,30,31,32,34,35,52,58,61,63,64,66,68,69,70,71,72,73,74,75,78,81,82,83,84,88,89,97,106,107,111,113,124,],[41,-32,-54,-42,-25,-38,-39,-40,41,-32,41,-24,-34,-41,-43,-48,-46,-47,-49,-50,-51,-52,-53,41,41,41,-35,41,41,-26,-36,41,-44,-45,41,41,41,]),'EQUALS':([13,14,26,28,29,30,31,32,34,35,52,58,61,63,64,66,68,69,70,71,72,73,74,75,78,81,82,83,84,88,89,97,106,107,111,113,124,],[42,-32,-54,-42,-25,-38,-39,-40,42,-32,42,-24,-34,-41,-43,-48,-46,-47,-49,-50,-51,-52,-53,42,42,42,-35,42,42,-26,-36,42,-44,-45,42,42,42,]),'OR':([13,14,26,28,29,30,31,32,34,35,52,58,61,63,64,66,68,69,70,71,72,73,74,75,78,81,82,83,84,88,89,97,106,107,111,113,124,],[43,-32,-54,-42,-25,-38,-39,-40,43,-32,43,-24,-34,-41,-43,-48,-46,-47,-49,-50,-51,-52,-53,43,43,43,-35,43,43,-26,-36,43,-44,-45,43,43,43,]),'AND':([13,14,26,28,29,30,31,32,34,35,52,58,61,63,64,66,68,69,70,71,72,73,74,75,78,81,82,83,84,88,89,97,106,107,111,113,124,],[44,-32,-54,-42,-25,-38,-39,-40,44,-32,44,-24,-34,-41,-43,-48,-46,-47,-49,-50,-51,-52,-53,44,44,44,-35,44,44,-26,-36,44,-44,-45,44,44,44,]),'PLUS':([13,14,26,28,29,30,31,32,34,35,52,58,61,63,64,66,68,69,70,71,72,73,74,75,78,81,82,83,84,88,89,97,106,107,111,113,124,],[45,-32,-54,-42,-25,-38,-39,-40,45,-32,45,-24,-34,-41,-43,-48,-46,-47,-49,-50,-51,-52,-53,45,45,45,-35,45,45,-26,-36,45,-44,-45,45,45,45,]),'ASSIGN':([14,49,],[47,79,]),'PRODUCT':([14,26,28,29,30,31,32,35,58,61,63,64,66,68,69,70,71,72,73,74,82,88,89,106,107,],[-32,59,-42,-25,-38,-39,-40,-32,59,59,59,59,59,59,59,59,59,59,59,59,-35,-26,-36,59,59,]),'DIVIDE':([14,26,28,29,30,31,32,35,58,61,63,64,66,68,69,70,71,72,73,74,82,88,89,106,107,],[-32,60,-42,-25,-38,-39,-40,-32,60,60,60,60,60,60,60,60,60,60,60,60,-35,-26,-36,60,60,]),'IN':([26,28,29,30,31,32,34,35,58,61,63,64,66,68,69,70,71,72,73,74,82,88,89,106,107,],[-54,-42,-25,-38,-39,-40,62,-32,-24,-34,-41,-43,-48,-46,-47,-49,-50,-51,-52,-53,-35,-26,-36,-44,-45,]),'RIGHT_PAREN':([26,28,29,30,31,32,35,48,52,58,61,63,64,66,68,69,70,71,72,73,74,77,78,81,82,84,86,87,88,89,103,106,107,109,111,113,124,],[-54,-42,-25,-38,-39,-40,-32,76,82,-24,-34,-41,-43,-48,-46,-47,-49,-50,-51,-52,-53,95,-27,99,-35,101,102,104,-26,-36,116,-44,-45,-1,118,119,126,]),'COMMA':([26,28,29,30,31,32,35,58,61,63,64,66,68,69,70,71,72,73,74,78,82,88,89,106,107,],[-54,-42,-25,-38,-39,-40,-32,-24,-34,-41,-43,-48,-46,-47,-49,-50,-51,-52,-53,96,-35,-26,-36,-44,-45,]),'TO':([26,28,29,30,31,32,35,58,61,63,64,66,68,69,70,71,72,73,74,82,83,88,89,106,107,],[-54,-42,-25,-38,-39,-40,-32,-24,-34,-41,-43,-48,-46,-47,-49,-50,-51,-52,-53,-35,100,-26,-36,-44,-45,]),'STEP':([26,28,29,30,31,32,35,58,61,63,64,66,68,69,70,71,72,73,74,82,88,89,106,107,113,],[-54,-42,-25,-38,-39,-40,-32,-24,-34,-41,-43,-48,-46,-47,-49,-50,-51,-52,-53,-35,-26,-36,-44,-45,120,]),'GREATER':([39,],[65,]),'LESS':([39,],[67,]),'THAN':([65,67,],[91,92,]),'ELSE':([85,114,],[-4,121,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,22,],[2,33,55,]),'statement':([0,3,22,],[3,3,3,]),'assignment_statement':([0,3,22,],[4,4,4,]),'expression_statement':([0,3,22,],[5,5,5,]),'iterative_statement':([0,3,22,],[6,6,6,]),'conditional_statement':([0,3,22,],[7,7,7,]),'compound_statement':([0,3,17,22,99,101,104,116,119,121,126,],[8,8,50,8,112,114,117,122,123,125,127,]),'print_statement':([0,3,22,],[9,9,9,]),'function_statement':([0,3,22,],[10,10,10,]),'function_call':([0,3,22,],[11,11,11,]),'expression':([0,3,12,19,22,47,48,51,53,54,56,79,87,96,98,100,120,],[13,13,34,52,13,75,78,81,83,84,78,97,78,78,111,113,124,]),'term':([0,3,12,19,22,25,27,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,79,87,91,92,96,98,100,120,],[26,26,26,26,26,58,61,63,64,66,68,69,70,71,72,73,74,26,26,26,26,26,26,26,26,106,107,26,26,26,26,]),'factor':([0,3,12,19,22,25,27,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,59,60,79,87,91,92,96,98,100,120,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,88,89,28,28,28,28,28,28,28,28,]),'literal':([0,3,12,19,22,25,27,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,59,60,79,87,91,92,96,98,100,120,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'arguments':([48,56,87,96,],[77,86,103,109,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('arguments -> expression COMMA arguments','arguments',3,'p_arguments','Arguments.py',4),
  ('function_call -> IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON','function_call',4,'p_function_call_empty','Call.py',4),
  ('assignment_statement -> PUT expression IN IDENTIFIER SEMICOLON','assignment_statement',5,'p_statement_descriptive','Assignment.py',4),
  ('compound_statement -> LEFT_BRACE statement_list RIGHT_BRACE','compound_statement',3,'p_compound_statement','Compound.py',4),
  ('conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement ELSE compound_statement','conditional_statement',7,'p_conditional_statement_if_else','If.py',4),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_statement_expression','Expression.py',4),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_statement_expression','Expression.py',5),
  ('statement -> assignment_statement','statement',1,'p_statement','Generic.py',5),
  ('statement -> expression_statement','statement',1,'p_statement','Generic.py',6),
  ('statement -> iterative_statement','statement',1,'p_statement','Generic.py',7),
  ('statement -> conditional_statement','statement',1,'p_statement','Generic.py',8),
  ('statement -> compound_statement','statement',1,'p_statement','Generic.py',9),
  ('statement -> print_statement','statement',1,'p_statement','Generic.py',10),
  ('statement -> function_statement','statement',1,'p_statement','Generic.py',11),
  ('statement -> function_call','statement',1,'p_statement','Generic.py',12),
  ('iterative_statement -> DO compound_statement WHILE LEFT_PAREN expression RIGHT_PAREN','iterative_statement',6,'p_iterative_statement_do_while','DoWhile.py',4),
  ('iterative_statement -> FOR LEFT_PAREN expression TO expression RIGHT_PAREN compound_statement','iterative_statement',7,'p_iterative_statement_for','For.py',4),
  ('iterative_statement -> WHILE LEFT_PAREN expression RIGHT_PAREN compound_statement','iterative_statement',5,'p_iterative_statement_while','While.py',4),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','List.py',5),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list','List.py',6),
  ('print_statement -> LOG LEFT_PAREN arguments RIGHT_PAREN SEMICOLON','print_statement',5,'p_statement_log','Print.py',4),
  ('function_statement -> FUNCTION IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN compound_statement','function_statement',6,'p_function_statement','Generic.py',5),
  ('program -> statement_list','program',1,'p_program','Program.py',6),
  ('expression -> MINUS term','expression',2,'p_expression_negative','Expression.py',7),
  ('factor -> literal','factor',1,'p_factor','Factor.py',7),
  ('term -> term PRODUCT factor','term',3,'p_term_factor_product','Term.py',7),
  ('arguments -> expression','arguments',1,'p_arguments_single','Arguments.py',8),
  ('function_call -> IDENTIFIER LEFT_PAREN arguments RIGHT_PAREN SEMICOLON','function_call',5,'p_function_call','Call.py',8),
  ('assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',4,'p_statement_assignment','Assignment.py',8),
  ('conditional_statement -> IF LEFT_PAREN expression RIGHT_PAREN compound_statement','conditional_statement',5,'p_conditional_statement_if','If.py',8),
  ('iterative_statement -> FOR LEFT_PAREN expression TO expression STEP expression RIGHT_PAREN compound_statement','iterative_statement',9,'p_iterative_statement_for_step','For.py',8),
  ('literal -> IDENTIFIER','literal',1,'p_literal_identifier','Literal.py',9),
  ('function_statement -> FUNCTION IDENTIFIER LEFT_PAREN RIGHT_PAREN compound_statement','function_statement',5,'p_function_statement_empty','Generic.py',10),
  ('expression -> NOT term','expression',2,'p_expression_not','Expression.py',11),
  ('factor -> LEFT_PAREN expression RIGHT_PAREN','factor',3,'p_factor_expression','Factor.py',11),
  ('term -> term DIVIDE factor','term',3,'p_term_factor_divide','Term.py',11),
  ('assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',5,'p_statement_assignment_let','Assignment.py',12),
  ('literal -> DOUBLE','literal',1,'p_literal','Literal.py',16),
  ('literal -> INTEGER','literal',1,'p_literal','Literal.py',17),
  ('literal -> STRING','literal',1,'p_literal','Literal.py',18),
  ('expression -> expression GTE term','expression',3,'p_expression_gte','Expression.py',15),
  ('term -> factor','term',1,'p_term_factor','Term.py',15),
  ('expression -> expression LTE term','expression',3,'p_expression_lte','Expression.py',19),
  ('expression -> expression IS GREATER THAN term','expression',5,'p_expression_gt_descriptive','Expression.py',23),
  ('expression -> expression IS LESS THAN term','expression',5,'p_expression_lt_descriptive','Expression.py',27),
  ('expression -> expression GT term','expression',3,'p_expression_gt','Expression.py',31),
  ('expression -> expression LT term','expression',3,'p_expression_lt','Expression.py',35),
  ('expression -> expression IS term','expression',3,'p_expression_equal_is','Expression.py',39),
  ('expression -> expression EQUALS term','expression',3,'p_expression_equal','Expression.py',43),
  ('expression -> expression OR term','expression',3,'p_expression_or','Expression.py',47),
  ('expression -> expression AND term','expression',3,'p_expression_and','Expression.py',51),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','Expression.py',55),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','Expression.py',59),
  ('expression -> term','expression',1,'p_expression_term','Expression.py',64),
]
